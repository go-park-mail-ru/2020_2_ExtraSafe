// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        (unknown)
// source: board/board.proto

// protoc --go_out=plugins=grpc:. *.proto

package protoBoard

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	profile "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/profile"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//==========================================
type BoardChangeInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64  `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	BoardID   int64  `protobuf:"varint,2,opt,name=BoardID,json=boardID,proto3" json:"BoardID,omitempty"`
	BoardName string `protobuf:"bytes,3,opt,name=BoardName,json=boardName,proto3" json:"BoardName,omitempty"`
	Theme     string `protobuf:"bytes,4,opt,name=Theme,json=theme,proto3" json:"Theme,omitempty"`
	Star      bool   `protobuf:"varint,5,opt,name=Star,json=star,proto3" json:"Star,omitempty"`
}

func (x *BoardChangeInput) Reset() {
	*x = BoardChangeInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardChangeInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardChangeInput) ProtoMessage() {}

func (x *BoardChangeInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardChangeInput.ProtoReflect.Descriptor instead.
func (*BoardChangeInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{0}
}

func (x *BoardChangeInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BoardChangeInput) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *BoardChangeInput) GetBoardName() string {
	if x != nil {
		return x.BoardName
	}
	return ""
}

func (x *BoardChangeInput) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *BoardChangeInput) GetStar() bool {
	if x != nil {
		return x.Star
	}
	return false
}

type BoardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64 `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	BoardID int64 `protobuf:"varint,2,opt,name=BoardID,json=boardID,proto3" json:"BoardID,omitempty"`
}

func (x *BoardInput) Reset() {
	*x = BoardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardInput) ProtoMessage() {}

func (x *BoardInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardInput.ProtoReflect.Descriptor instead.
func (*BoardInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{1}
}

func (x *BoardInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *BoardInput) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

type BoardOutside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoardID int64                       `protobuf:"varint,1,opt,name=BoardID,json=boardID,proto3" json:"BoardID,omitempty"`
	Admin   *profile.UserOutsideShort   `protobuf:"bytes,2,opt,name=Admin,json=admin,proto3" json:"Admin,omitempty"`
	Name    string                      `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Theme   string                      `protobuf:"bytes,4,opt,name=Theme,json=theme,proto3" json:"Theme,omitempty"`
	Star    bool                        `protobuf:"varint,5,opt,name=Star,json=star,proto3" json:"Star,omitempty"`
	Users   []*profile.UserOutsideShort `protobuf:"bytes,6,rep,name=Users,json=users,proto3" json:"Users,omitempty"`
	Cards   []*CardOutside              `protobuf:"bytes,7,rep,name=Cards,json=cards,proto3" json:"Cards,omitempty"`
}

func (x *BoardOutside) Reset() {
	*x = BoardOutside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoardOutside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardOutside) ProtoMessage() {}

func (x *BoardOutside) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardOutside.ProtoReflect.Descriptor instead.
func (*BoardOutside) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{2}
}

func (x *BoardOutside) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *BoardOutside) GetAdmin() *profile.UserOutsideShort {
	if x != nil {
		return x.Admin
	}
	return nil
}

func (x *BoardOutside) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BoardOutside) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *BoardOutside) GetStar() bool {
	if x != nil {
		return x.Star
	}
	return false
}

func (x *BoardOutside) GetUsers() []*profile.UserOutsideShort {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *BoardOutside) GetCards() []*CardOutside {
	if x != nil {
		return x.Cards
	}
	return nil
}

//==========================================
type CardInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64  `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	CardID  int64  `protobuf:"varint,2,opt,name=CardID,json=cardID,proto3" json:"CardID,omitempty"`
	BoardID int64  `protobuf:"varint,3,opt,name=BoardID,json=boardID,proto3" json:"BoardID,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Order   int64  `protobuf:"varint,5,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
}

func (x *CardInput) Reset() {
	*x = CardInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInput) ProtoMessage() {}

func (x *CardInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInput.ProtoReflect.Descriptor instead.
func (*CardInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{3}
}

func (x *CardInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CardInput) GetCardID() int64 {
	if x != nil {
		return x.CardID
	}
	return 0
}

func (x *CardInput) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *CardInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardInput) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CardOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID int64 `protobuf:"varint,1,opt,name=CardID,json=cardID,proto3" json:"CardID,omitempty"`
	Order  int64 `protobuf:"varint,2,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
}

func (x *CardOrder) Reset() {
	*x = CardOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardOrder) ProtoMessage() {}

func (x *CardOrder) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardOrder.ProtoReflect.Descriptor instead.
func (*CardOrder) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{4}
}

func (x *CardOrder) GetCardID() int64 {
	if x != nil {
		return x.CardID
	}
	return 0
}

func (x *CardOrder) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type CardsOrderInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64        `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	Cards  []*CardOrder `protobuf:"bytes,2,rep,name=Cards,json=cards,proto3" json:"Cards,omitempty"`
}

func (x *CardsOrderInput) Reset() {
	*x = CardsOrderInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardsOrderInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsOrderInput) ProtoMessage() {}

func (x *CardsOrderInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsOrderInput.ProtoReflect.Descriptor instead.
func (*CardsOrderInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{5}
}

func (x *CardsOrderInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CardsOrderInput) GetCards() []*CardOrder {
	if x != nil {
		return x.Cards
	}
	return nil
}

type CardOutside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID int64               `protobuf:"varint,1,opt,name=CardID,json=cardID,proto3" json:"CardID,omitempty"`
	Name   string              `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Order  int64               `protobuf:"varint,3,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	Tasks  []*TaskOutsideShort `protobuf:"bytes,4,rep,name=Tasks,json=tasks,proto3" json:"Tasks,omitempty"`
}

func (x *CardOutside) Reset() {
	*x = CardOutside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardOutside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardOutside) ProtoMessage() {}

func (x *CardOutside) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardOutside.ProtoReflect.Descriptor instead.
func (*CardOutside) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{6}
}

func (x *CardOutside) GetCardID() int64 {
	if x != nil {
		return x.CardID
	}
	return 0
}

func (x *CardOutside) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CardOutside) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CardOutside) GetTasks() []*TaskOutsideShort {
	if x != nil {
		return x.Tasks
	}
	return nil
}

//==========================================
type TaskInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      int64  `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	TaskID      int64  `protobuf:"varint,2,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	CardID      int64  `protobuf:"varint,3,opt,name=CardID,json=cardID,proto3" json:"CardID,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Order       int64  `protobuf:"varint,6,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
}

func (x *TaskInput) Reset() {
	*x = TaskInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInput) ProtoMessage() {}

func (x *TaskInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInput.ProtoReflect.Descriptor instead.
func (*TaskInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{7}
}

func (x *TaskInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TaskInput) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskInput) GetCardID() int64 {
	if x != nil {
		return x.CardID
	}
	return 0
}

func (x *TaskInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskInput) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type TaskOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID int64 `protobuf:"varint,1,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Order  int64 `protobuf:"varint,2,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
}

func (x *TaskOrder) Reset() {
	*x = TaskOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOrder) ProtoMessage() {}

func (x *TaskOrder) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOrder.ProtoReflect.Descriptor instead.
func (*TaskOrder) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{8}
}

func (x *TaskOrder) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskOrder) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type TasksOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardID int64        `protobuf:"varint,1,opt,name=CardID,json=cardID,proto3" json:"CardID,omitempty"`
	Tasks  []*TaskOrder `protobuf:"bytes,2,rep,name=Tasks,json=tasks,proto3" json:"Tasks,omitempty"`
}

func (x *TasksOrder) Reset() {
	*x = TasksOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksOrder) ProtoMessage() {}

func (x *TasksOrder) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksOrder.ProtoReflect.Descriptor instead.
func (*TasksOrder) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{9}
}

func (x *TasksOrder) GetCardID() int64 {
	if x != nil {
		return x.CardID
	}
	return 0
}

func (x *TasksOrder) GetTasks() []*TaskOrder {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TasksOrderInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64         `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	Tasks  []*TasksOrder `protobuf:"bytes,2,rep,name=Tasks,json=tasks,proto3" json:"Tasks,omitempty"`
}

func (x *TasksOrderInput) Reset() {
	*x = TasksOrderInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TasksOrderInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksOrderInput) ProtoMessage() {}

func (x *TasksOrderInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksOrderInput.ProtoReflect.Descriptor instead.
func (*TasksOrderInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{10}
}

func (x *TasksOrderInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TasksOrderInput) GetTasks() []*TasksOrder {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type TaskInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int64               `protobuf:"varint,1,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Order       int64               `protobuf:"varint,4,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	Tags        []*TagOutside       `protobuf:"bytes,5,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	Users       []int64             `protobuf:"varint,6,rep,packed,name=Users,json=users,proto3" json:"Users,omitempty"`
	Checklists  []*ChecklistOutside `protobuf:"bytes,7,rep,name=Checklists,json=checklists,proto3" json:"Checklists,omitempty"`
	Comments    []*CommentOutside   `protobuf:"bytes,8,rep,name=Comments,json=comments,proto3" json:"Comments,omitempty"`
}

func (x *TaskInternal) Reset() {
	*x = TaskInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInternal) ProtoMessage() {}

func (x *TaskInternal) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInternal.ProtoReflect.Descriptor instead.
func (*TaskInternal) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{11}
}

func (x *TaskInternal) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskInternal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskInternal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskInternal) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TaskInternal) GetTags() []*TagOutside {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskInternal) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TaskInternal) GetChecklists() []*ChecklistOutside {
	if x != nil {
		return x.Checklists
	}
	return nil
}

func (x *TaskInternal) GetComments() []*CommentOutside {
	if x != nil {
		return x.Comments
	}
	return nil
}

type TaskInternalShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int64               `protobuf:"varint,1,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Name        string              `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Order       int64               `protobuf:"varint,4,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	Tags        []*TagOutside       `protobuf:"bytes,5,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	Users       []int64             `protobuf:"varint,6,rep,packed,name=Users,json=users,proto3" json:"Users,omitempty"`
	Checklists  []*ChecklistOutside `protobuf:"bytes,7,rep,name=Checklists,json=checklists,proto3" json:"Checklists,omitempty"`
}

func (x *TaskInternalShort) Reset() {
	*x = TaskInternalShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInternalShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInternalShort) ProtoMessage() {}

func (x *TaskInternalShort) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInternalShort.ProtoReflect.Descriptor instead.
func (*TaskInternalShort) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{12}
}

func (x *TaskInternalShort) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskInternalShort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskInternalShort) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskInternalShort) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TaskInternalShort) GetTags() []*TagOutside {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskInternalShort) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TaskInternalShort) GetChecklists() []*ChecklistOutside {
	if x != nil {
		return x.Checklists
	}
	return nil
}

type TaskAssigner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     int64 `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	TaskID     int64 `protobuf:"varint,2,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	AssignerID int64 `protobuf:"varint,3,opt,name=AssignerID,json=assignerID,proto3" json:"AssignerID,omitempty"`
}

func (x *TaskAssigner) Reset() {
	*x = TaskAssigner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAssigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssigner) ProtoMessage() {}

func (x *TaskAssigner) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssigner.ProtoReflect.Descriptor instead.
func (*TaskAssigner) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{13}
}

func (x *TaskAssigner) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TaskAssigner) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskAssigner) GetAssignerID() int64 {
	if x != nil {
		return x.AssignerID
	}
	return 0
}

type TaskAssignerIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignerIDs []int64 `protobuf:"varint,1,rep,packed,name=assignerIDs,proto3" json:"assignerIDs,omitempty"`
}

func (x *TaskAssignerIDs) Reset() {
	*x = TaskAssignerIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAssignerIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignerIDs) ProtoMessage() {}

func (x *TaskAssignerIDs) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignerIDs.ProtoReflect.Descriptor instead.
func (*TaskAssignerIDs) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{14}
}

func (x *TaskAssignerIDs) GetAssignerIDs() []int64 {
	if x != nil {
		return x.AssignerIDs
	}
	return nil
}

type TaskOutside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int64                       `protobuf:"varint,1,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Name        string                      `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Description string                      `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Order       int64                       `protobuf:"varint,4,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	Tags        []*TagOutside               `protobuf:"bytes,5,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	Users       []*profile.UserOutsideShort `protobuf:"bytes,6,rep,name=Users,json=users,proto3" json:"Users,omitempty"`
	Checklists  []*ChecklistOutside         `protobuf:"bytes,7,rep,name=Checklists,json=checklists,proto3" json:"Checklists,omitempty"`
	Comments    []*CommentOutside           `protobuf:"bytes,8,rep,name=Comments,json=comments,proto3" json:"Comments,omitempty"`
}

func (x *TaskOutside) Reset() {
	*x = TaskOutside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOutside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOutside) ProtoMessage() {}

func (x *TaskOutside) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOutside.ProtoReflect.Descriptor instead.
func (*TaskOutside) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{15}
}

func (x *TaskOutside) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskOutside) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskOutside) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskOutside) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TaskOutside) GetTags() []*TagOutside {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskOutside) GetUsers() []*profile.UserOutsideShort {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TaskOutside) GetChecklists() []*ChecklistOutside {
	if x != nil {
		return x.Checklists
	}
	return nil
}

func (x *TaskOutside) GetComments() []*CommentOutside {
	if x != nil {
		return x.Comments
	}
	return nil
}

type TaskOutsideShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int64                       `protobuf:"varint,1,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Name        string                      `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Description string                      `protobuf:"bytes,3,opt,name=Description,json=description,proto3" json:"Description,omitempty"`
	Order       int64                       `protobuf:"varint,4,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	Tags        []*TagOutside               `protobuf:"bytes,5,rep,name=Tags,json=tags,proto3" json:"Tags,omitempty"`
	Users       []*profile.UserOutsideShort `protobuf:"bytes,6,rep,name=Users,json=users,proto3" json:"Users,omitempty"`
	Checklists  []*ChecklistOutside         `protobuf:"bytes,7,rep,name=Checklists,json=checklists,proto3" json:"Checklists,omitempty"`
}

func (x *TaskOutsideShort) Reset() {
	*x = TaskOutsideShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOutsideShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOutsideShort) ProtoMessage() {}

func (x *TaskOutsideShort) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOutsideShort.ProtoReflect.Descriptor instead.
func (*TaskOutsideShort) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{16}
}

func (x *TaskOutsideShort) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskOutsideShort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskOutsideShort) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TaskOutsideShort) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *TaskOutsideShort) GetTags() []*TagOutside {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskOutsideShort) GetUsers() []*profile.UserOutsideShort {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TaskOutsideShort) GetChecklists() []*ChecklistOutside {
	if x != nil {
		return x.Checklists
	}
	return nil
}

//==========================================
type TagInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64  `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	TaskID  int64  `protobuf:"varint,2,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	TagID   int64  `protobuf:"varint,3,opt,name=TagID,json=tagID,proto3" json:"TagID,omitempty"`
	BoardID int64  `protobuf:"varint,4,opt,name=BoardID,json=boardID,proto3" json:"BoardID,omitempty"`
	Color   string `protobuf:"bytes,5,opt,name=Color,json=color,proto3" json:"Color,omitempty"`
	Name    string `protobuf:"bytes,6,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
}

func (x *TagInput) Reset() {
	*x = TagInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagInput) ProtoMessage() {}

func (x *TagInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagInput.ProtoReflect.Descriptor instead.
func (*TagInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{17}
}

func (x *TagInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TagInput) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TagInput) GetTagID() int64 {
	if x != nil {
		return x.TagID
	}
	return 0
}

func (x *TagInput) GetBoardID() int64 {
	if x != nil {
		return x.BoardID
	}
	return 0
}

func (x *TagInput) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TagInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TaskTagInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int64 `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	TaskID int64 `protobuf:"varint,2,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	TagID  int64 `protobuf:"varint,3,opt,name=TagID,json=tagID,proto3" json:"TagID,omitempty"`
}

func (x *TaskTagInput) Reset() {
	*x = TaskTagInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTagInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTagInput) ProtoMessage() {}

func (x *TaskTagInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTagInput.ProtoReflect.Descriptor instead.
func (*TaskTagInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{18}
}

func (x *TaskTagInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *TaskTagInput) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskTagInput) GetTagID() int64 {
	if x != nil {
		return x.TagID
	}
	return 0
}

type TagOutside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagID int64  `protobuf:"varint,1,opt,name=TagID,json=tagID,proto3" json:"TagID,omitempty"`
	Color string `protobuf:"bytes,2,opt,name=Color,json=color,proto3" json:"Color,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
}

func (x *TagOutside) Reset() {
	*x = TagOutside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagOutside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagOutside) ProtoMessage() {}

func (x *TagOutside) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagOutside.ProtoReflect.Descriptor instead.
func (*TagOutside) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{19}
}

func (x *TagOutside) GetTagID() int64 {
	if x != nil {
		return x.TagID
	}
	return 0
}

func (x *TagOutside) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TagOutside) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//==========================================
type CommentInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64  `protobuf:"varint,1,opt,name=CommentID,json=commentID,proto3" json:"CommentID,omitempty"`
	TaskID    int64  `protobuf:"varint,2,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=Message,json=message,proto3" json:"Message,omitempty"`
	Order     int64  `protobuf:"varint,4,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	UserID    int64  `protobuf:"varint,5,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
}

func (x *CommentInput) Reset() {
	*x = CommentInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInput) ProtoMessage() {}

func (x *CommentInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInput.ProtoReflect.Descriptor instead.
func (*CommentInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{20}
}

func (x *CommentInput) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *CommentInput) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CommentInput) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommentInput) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CommentInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CommentInternal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64  `protobuf:"varint,1,opt,name=CommentID,json=commentID,proto3" json:"CommentID,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"Message,omitempty"`
	Order     int64  `protobuf:"varint,3,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	UserID    int64  `protobuf:"varint,4,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
}

func (x *CommentInternal) Reset() {
	*x = CommentInternal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentInternal) ProtoMessage() {}

func (x *CommentInternal) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentInternal.ProtoReflect.Descriptor instead.
func (*CommentInternal) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{21}
}

func (x *CommentInternal) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *CommentInternal) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommentInternal) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CommentInternal) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type CommentOutside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentID int64                     `protobuf:"varint,1,opt,name=CommentID,json=commentID,proto3" json:"CommentID,omitempty"`
	Message   string                    `protobuf:"bytes,2,opt,name=Message,json=message,proto3" json:"Message,omitempty"`
	Order     int64                     `protobuf:"varint,3,opt,name=Order,json=order,proto3" json:"Order,omitempty"`
	User      *profile.UserOutsideShort `protobuf:"bytes,4,opt,name=User,json=user,proto3" json:"User,omitempty"`
}

func (x *CommentOutside) Reset() {
	*x = CommentOutside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentOutside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentOutside) ProtoMessage() {}

func (x *CommentOutside) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentOutside.ProtoReflect.Descriptor instead.
func (*CommentOutside) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{22}
}

func (x *CommentOutside) GetCommentID() int64 {
	if x != nil {
		return x.CommentID
	}
	return 0
}

func (x *CommentOutside) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommentOutside) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *CommentOutside) GetUser() *profile.UserOutsideShort {
	if x != nil {
		return x.User
	}
	return nil
}

//==========================================
type ChecklistInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID      int64  `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	ChecklistID int64  `protobuf:"varint,2,opt,name=ChecklistID,json=checklistID,proto3" json:"ChecklistID,omitempty"`
	TaskID      int64  `protobuf:"varint,3,opt,name=TaskID,json=taskID,proto3" json:"TaskID,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Items       []byte `protobuf:"bytes,5,opt,name=Items,json=items,proto3" json:"Items,omitempty"`
}

func (x *ChecklistInput) Reset() {
	*x = ChecklistInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecklistInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecklistInput) ProtoMessage() {}

func (x *ChecklistInput) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecklistInput.ProtoReflect.Descriptor instead.
func (*ChecklistInput) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{23}
}

func (x *ChecklistInput) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ChecklistInput) GetChecklistID() int64 {
	if x != nil {
		return x.ChecklistID
	}
	return 0
}

func (x *ChecklistInput) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *ChecklistInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChecklistInput) GetItems() []byte {
	if x != nil {
		return x.Items
	}
	return nil
}

type ChecklistOutside struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChecklistID int64  `protobuf:"varint,1,opt,name=ChecklistID,json=checklistID,proto3" json:"ChecklistID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	Items       []byte `protobuf:"bytes,3,opt,name=Items,json=items,proto3" json:"Items,omitempty"`
}

func (x *ChecklistOutside) Reset() {
	*x = ChecklistOutside{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChecklistOutside) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChecklistOutside) ProtoMessage() {}

func (x *ChecklistOutside) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChecklistOutside.ProtoReflect.Descriptor instead.
func (*ChecklistOutside) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{24}
}

func (x *ChecklistOutside) GetChecklistID() int64 {
	if x != nil {
		return x.ChecklistID
	}
	return 0
}

func (x *ChecklistOutside) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChecklistOutside) GetItems() []byte {
	if x != nil {
		return x.Items
	}
	return nil
}

//==========================================
type CheckPermissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    int64 `protobuf:"varint,1,opt,name=UserID,json=userID,proto3" json:"UserID,omitempty"`
	ElementID int64 `protobuf:"varint,2,opt,name=ElementID,json=elementID,proto3" json:"ElementID,omitempty"`
	IfAdmin   bool  `protobuf:"varint,3,opt,name=IfAdmin,json=ifAdmin,proto3" json:"IfAdmin,omitempty"`
}

func (x *CheckPermissions) Reset() {
	*x = CheckPermissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPermissions) ProtoMessage() {}

func (x *CheckPermissions) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPermissions.ProtoReflect.Descriptor instead.
func (*CheckPermissions) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{25}
}

func (x *CheckPermissions) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CheckPermissions) GetElementID() int64 {
	if x != nil {
		return x.ElementID
	}
	return 0
}

func (x *CheckPermissions) GetIfAdmin() bool {
	if x != nil {
		return x.IfAdmin
	}
	return false
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy bool `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_board_board_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_board_board_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_board_board_proto_rawDescGZIP(), []int{26}
}

func (x *Nothing) GetDummy() bool {
	if x != nil {
		return x.Dummy
	}
	return false
}

var File_board_board_proto protoreflect.FileDescriptor

var file_board_board_proto_rawDesc = []byte{
	0x0a, 0x11, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x1a,
	0x15, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x22, 0x3e, 0x0a, 0x0a, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x22, 0x81, 0x02, 0x0a, 0x0c, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x73, 0x74, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x09, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x09, 0x43, 0x61,
	0x72, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x56, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x2b, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x0b, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x51, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x22, 0x57, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xaa, 0x02, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67,
	0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54,
	0x61, 0x67, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73,
	0x6b, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x04,
	0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x08,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74,
	0x73, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x22, 0x94, 0x01,
	0x0a, 0x08, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61,
	0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x0a, 0x54, 0x61,
	0x67, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x5e, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x62, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x66, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x66, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x1f, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x32, 0xf9, 0x10, 0x0a, 0x05, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x4e,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x47,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x4f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74,
	0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x4f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x61, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x54, 0x61, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x67, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x61, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f,
	0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x13, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e,
	0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_board_board_proto_rawDescOnce sync.Once
	file_board_board_proto_rawDescData = file_board_board_proto_rawDesc
)

func file_board_board_proto_rawDescGZIP() []byte {
	file_board_board_proto_rawDescOnce.Do(func() {
		file_board_board_proto_rawDescData = protoimpl.X.CompressGZIP(file_board_board_proto_rawDescData)
	})
	return file_board_board_proto_rawDescData
}

var file_board_board_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_board_board_proto_goTypes = []interface{}{
	(*BoardChangeInput)(nil),           // 0: protoBoard.BoardChangeInput
	(*BoardInput)(nil),                 // 1: protoBoard.BoardInput
	(*BoardOutside)(nil),               // 2: protoBoard.BoardOutside
	(*CardInput)(nil),                  // 3: protoBoard.CardInput
	(*CardOrder)(nil),                  // 4: protoBoard.CardOrder
	(*CardsOrderInput)(nil),            // 5: protoBoard.CardsOrderInput
	(*CardOutside)(nil),                // 6: protoBoard.CardOutside
	(*TaskInput)(nil),                  // 7: protoBoard.TaskInput
	(*TaskOrder)(nil),                  // 8: protoBoard.TaskOrder
	(*TasksOrder)(nil),                 // 9: protoBoard.TasksOrder
	(*TasksOrderInput)(nil),            // 10: protoBoard.TasksOrderInput
	(*TaskInternal)(nil),               // 11: protoBoard.TaskInternal
	(*TaskInternalShort)(nil),          // 12: protoBoard.TaskInternalShort
	(*TaskAssigner)(nil),               // 13: protoBoard.TaskAssigner
	(*TaskAssignerIDs)(nil),            // 14: protoBoard.TaskAssignerIDs
	(*TaskOutside)(nil),                // 15: protoBoard.TaskOutside
	(*TaskOutsideShort)(nil),           // 16: protoBoard.TaskOutsideShort
	(*TagInput)(nil),                   // 17: protoBoard.TagInput
	(*TaskTagInput)(nil),               // 18: protoBoard.TaskTagInput
	(*TagOutside)(nil),                 // 19: protoBoard.TagOutside
	(*CommentInput)(nil),               // 20: protoBoard.CommentInput
	(*CommentInternal)(nil),            // 21: protoBoard.CommentInternal
	(*CommentOutside)(nil),             // 22: protoBoard.CommentOutside
	(*ChecklistInput)(nil),             // 23: protoBoard.ChecklistInput
	(*ChecklistOutside)(nil),           // 24: protoBoard.ChecklistOutside
	(*CheckPermissions)(nil),           // 25: protoBoard.CheckPermissions
	(*Nothing)(nil),                    // 26: protoBoard.Nothing
	(*profile.UserOutsideShort)(nil),   // 27: protoProfile.UserOutsideShort
	(*profile.UserID)(nil),             // 28: protoProfile.UserID
	(*profile.BoardsOutsideShort)(nil), // 29: protoProfile.BoardsOutsideShort
	(*profile.BoardOutsideShort)(nil),  // 30: protoProfile.BoardOutsideShort
}
var file_board_board_proto_depIdxs = []int32{
	27, // 0: protoBoard.BoardOutside.Admin:type_name -> protoProfile.UserOutsideShort
	27, // 1: protoBoard.BoardOutside.Users:type_name -> protoProfile.UserOutsideShort
	6,  // 2: protoBoard.BoardOutside.Cards:type_name -> protoBoard.CardOutside
	4,  // 3: protoBoard.CardsOrderInput.Cards:type_name -> protoBoard.CardOrder
	16, // 4: protoBoard.CardOutside.Tasks:type_name -> protoBoard.TaskOutsideShort
	8,  // 5: protoBoard.TasksOrder.Tasks:type_name -> protoBoard.TaskOrder
	9,  // 6: protoBoard.TasksOrderInput.Tasks:type_name -> protoBoard.TasksOrder
	19, // 7: protoBoard.TaskInternal.Tags:type_name -> protoBoard.TagOutside
	24, // 8: protoBoard.TaskInternal.Checklists:type_name -> protoBoard.ChecklistOutside
	22, // 9: protoBoard.TaskInternal.Comments:type_name -> protoBoard.CommentOutside
	19, // 10: protoBoard.TaskInternalShort.Tags:type_name -> protoBoard.TagOutside
	24, // 11: protoBoard.TaskInternalShort.Checklists:type_name -> protoBoard.ChecklistOutside
	19, // 12: protoBoard.TaskOutside.Tags:type_name -> protoBoard.TagOutside
	27, // 13: protoBoard.TaskOutside.Users:type_name -> protoProfile.UserOutsideShort
	24, // 14: protoBoard.TaskOutside.Checklists:type_name -> protoBoard.ChecklistOutside
	22, // 15: protoBoard.TaskOutside.Comments:type_name -> protoBoard.CommentOutside
	19, // 16: protoBoard.TaskOutsideShort.Tags:type_name -> protoBoard.TagOutside
	27, // 17: protoBoard.TaskOutsideShort.Users:type_name -> protoProfile.UserOutsideShort
	24, // 18: protoBoard.TaskOutsideShort.Checklists:type_name -> protoBoard.ChecklistOutside
	27, // 19: protoBoard.CommentOutside.User:type_name -> protoProfile.UserOutsideShort
	28, // 20: protoBoard.Board.GetBoardsList:input_type -> protoProfile.UserID
	0,  // 21: protoBoard.Board.CreateBoard:input_type -> protoBoard.BoardChangeInput
	1,  // 22: protoBoard.Board.GetBoard:input_type -> protoBoard.BoardInput
	0,  // 23: protoBoard.Board.ChangeBoard:input_type -> protoBoard.BoardChangeInput
	1,  // 24: protoBoard.Board.DeleteBoard:input_type -> protoBoard.BoardInput
	3,  // 25: protoBoard.Board.CreateCard:input_type -> protoBoard.CardInput
	3,  // 26: protoBoard.Board.GetCard:input_type -> protoBoard.CardInput
	3,  // 27: protoBoard.Board.ChangeCard:input_type -> protoBoard.CardInput
	3,  // 28: protoBoard.Board.DeleteCard:input_type -> protoBoard.CardInput
	5,  // 29: protoBoard.Board.CardOrderChange:input_type -> protoBoard.CardsOrderInput
	7,  // 30: protoBoard.Board.CreateTask:input_type -> protoBoard.TaskInput
	7,  // 31: protoBoard.Board.GetTask:input_type -> protoBoard.TaskInput
	7,  // 32: protoBoard.Board.ChangeTask:input_type -> protoBoard.TaskInput
	7,  // 33: protoBoard.Board.DeleteTask:input_type -> protoBoard.TaskInput
	10, // 34: protoBoard.Board.TasksOrderChange:input_type -> protoBoard.TasksOrderInput
	13, // 35: protoBoard.Board.AssignUser:input_type -> protoBoard.TaskAssigner
	13, // 36: protoBoard.Board.DismissUser:input_type -> protoBoard.TaskAssigner
	7,  // 37: protoBoard.Board.GetAssigners:input_type -> protoBoard.TaskInput
	17, // 38: protoBoard.Board.CreateTag:input_type -> protoBoard.TagInput
	17, // 39: protoBoard.Board.ChangeTag:input_type -> protoBoard.TagInput
	17, // 40: protoBoard.Board.DeleteTag:input_type -> protoBoard.TagInput
	18, // 41: protoBoard.Board.AddTag:input_type -> protoBoard.TaskTagInput
	18, // 42: protoBoard.Board.RemoveTag:input_type -> protoBoard.TaskTagInput
	20, // 43: protoBoard.Board.CreateComment:input_type -> protoBoard.CommentInput
	20, // 44: protoBoard.Board.ChangeComment:input_type -> protoBoard.CommentInput
	20, // 45: protoBoard.Board.DeleteComment:input_type -> protoBoard.CommentInput
	23, // 46: protoBoard.Board.CreateChecklist:input_type -> protoBoard.ChecklistInput
	23, // 47: protoBoard.Board.ChangeChecklist:input_type -> protoBoard.ChecklistInput
	23, // 48: protoBoard.Board.DeleteChecklist:input_type -> protoBoard.ChecklistInput
	25, // 49: protoBoard.Board.CheckBoardPermission:input_type -> protoBoard.CheckPermissions
	25, // 50: protoBoard.Board.CheckCardPermission:input_type -> protoBoard.CheckPermissions
	25, // 51: protoBoard.Board.CheckTaskPermission:input_type -> protoBoard.CheckPermissions
	29, // 52: protoBoard.Board.GetBoardsList:output_type -> protoProfile.BoardsOutsideShort
	30, // 53: protoBoard.Board.CreateBoard:output_type -> protoProfile.BoardOutsideShort
	2,  // 54: protoBoard.Board.GetBoard:output_type -> protoBoard.BoardOutside
	2,  // 55: protoBoard.Board.ChangeBoard:output_type -> protoBoard.BoardOutside
	26, // 56: protoBoard.Board.DeleteBoard:output_type -> protoBoard.Nothing
	6,  // 57: protoBoard.Board.CreateCard:output_type -> protoBoard.CardOutside
	6,  // 58: protoBoard.Board.GetCard:output_type -> protoBoard.CardOutside
	6,  // 59: protoBoard.Board.ChangeCard:output_type -> protoBoard.CardOutside
	26, // 60: protoBoard.Board.DeleteCard:output_type -> protoBoard.Nothing
	26, // 61: protoBoard.Board.CardOrderChange:output_type -> protoBoard.Nothing
	15, // 62: protoBoard.Board.CreateTask:output_type -> protoBoard.TaskOutside
	15, // 63: protoBoard.Board.GetTask:output_type -> protoBoard.TaskOutside
	15, // 64: protoBoard.Board.ChangeTask:output_type -> protoBoard.TaskOutside
	26, // 65: protoBoard.Board.DeleteTask:output_type -> protoBoard.Nothing
	26, // 66: protoBoard.Board.TasksOrderChange:output_type -> protoBoard.Nothing
	26, // 67: protoBoard.Board.AssignUser:output_type -> protoBoard.Nothing
	26, // 68: protoBoard.Board.DismissUser:output_type -> protoBoard.Nothing
	14, // 69: protoBoard.Board.GetAssigners:output_type -> protoBoard.TaskAssignerIDs
	19, // 70: protoBoard.Board.CreateTag:output_type -> protoBoard.TagOutside
	19, // 71: protoBoard.Board.ChangeTag:output_type -> protoBoard.TagOutside
	26, // 72: protoBoard.Board.DeleteTag:output_type -> protoBoard.Nothing
	26, // 73: protoBoard.Board.AddTag:output_type -> protoBoard.Nothing
	26, // 74: protoBoard.Board.RemoveTag:output_type -> protoBoard.Nothing
	22, // 75: protoBoard.Board.CreateComment:output_type -> protoBoard.CommentOutside
	22, // 76: protoBoard.Board.ChangeComment:output_type -> protoBoard.CommentOutside
	26, // 77: protoBoard.Board.DeleteComment:output_type -> protoBoard.Nothing
	24, // 78: protoBoard.Board.CreateChecklist:output_type -> protoBoard.ChecklistOutside
	24, // 79: protoBoard.Board.ChangeChecklist:output_type -> protoBoard.ChecklistOutside
	26, // 80: protoBoard.Board.DeleteChecklist:output_type -> protoBoard.Nothing
	26, // 81: protoBoard.Board.CheckBoardPermission:output_type -> protoBoard.Nothing
	26, // 82: protoBoard.Board.CheckCardPermission:output_type -> protoBoard.Nothing
	26, // 83: protoBoard.Board.CheckTaskPermission:output_type -> protoBoard.Nothing
	52, // [52:84] is the sub-list for method output_type
	20, // [20:52] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_board_board_proto_init() }
func file_board_board_proto_init() {
	if File_board_board_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_board_board_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardChangeInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoardOutside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardsOrderInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardOutside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TasksOrderInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInternalShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAssigner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAssignerIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOutside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOutsideShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTagInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagOutside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentInternal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentOutside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecklistInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChecklistOutside); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPermissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_board_board_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_board_board_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_board_board_proto_goTypes,
		DependencyIndexes: file_board_board_proto_depIdxs,
		MessageInfos:      file_board_board_proto_msgTypes,
	}.Build()
	File_board_board_proto = out.File
	file_board_board_proto_rawDesc = nil
	file_board_board_proto_goTypes = nil
	file_board_board_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BoardClient is the client API for Board service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BoardClient interface {
	GetBoardsList(ctx context.Context, in *profile.UserID, opts ...grpc.CallOption) (*profile.BoardsOutsideShort, error)
	CreateBoard(ctx context.Context, in *BoardChangeInput, opts ...grpc.CallOption) (*profile.BoardOutsideShort, error)
	GetBoard(ctx context.Context, in *BoardInput, opts ...grpc.CallOption) (*BoardOutside, error)
	ChangeBoard(ctx context.Context, in *BoardChangeInput, opts ...grpc.CallOption) (*BoardOutside, error)
	DeleteBoard(ctx context.Context, in *BoardInput, opts ...grpc.CallOption) (*Nothing, error)
	CreateCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*CardOutside, error)
	GetCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*CardOutside, error)
	ChangeCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*CardOutside, error)
	DeleteCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*Nothing, error)
	CardOrderChange(ctx context.Context, in *CardsOrderInput, opts ...grpc.CallOption) (*Nothing, error)
	CreateTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutside, error)
	GetTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutside, error)
	ChangeTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutside, error)
	DeleteTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*Nothing, error)
	TasksOrderChange(ctx context.Context, in *TasksOrderInput, opts ...grpc.CallOption) (*Nothing, error)
	AssignUser(ctx context.Context, in *TaskAssigner, opts ...grpc.CallOption) (*Nothing, error)
	DismissUser(ctx context.Context, in *TaskAssigner, opts ...grpc.CallOption) (*Nothing, error)
	GetAssigners(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskAssignerIDs, error)
	CreateTag(ctx context.Context, in *TagInput, opts ...grpc.CallOption) (*TagOutside, error)
	ChangeTag(ctx context.Context, in *TagInput, opts ...grpc.CallOption) (*TagOutside, error)
	DeleteTag(ctx context.Context, in *TagInput, opts ...grpc.CallOption) (*Nothing, error)
	AddTag(ctx context.Context, in *TaskTagInput, opts ...grpc.CallOption) (*Nothing, error)
	RemoveTag(ctx context.Context, in *TaskTagInput, opts ...grpc.CallOption) (*Nothing, error)
	CreateComment(ctx context.Context, in *CommentInput, opts ...grpc.CallOption) (*CommentOutside, error)
	ChangeComment(ctx context.Context, in *CommentInput, opts ...grpc.CallOption) (*CommentOutside, error)
	DeleteComment(ctx context.Context, in *CommentInput, opts ...grpc.CallOption) (*Nothing, error)
	CreateChecklist(ctx context.Context, in *ChecklistInput, opts ...grpc.CallOption) (*ChecklistOutside, error)
	ChangeChecklist(ctx context.Context, in *ChecklistInput, opts ...grpc.CallOption) (*ChecklistOutside, error)
	DeleteChecklist(ctx context.Context, in *ChecklistInput, opts ...grpc.CallOption) (*Nothing, error)
	CheckBoardPermission(ctx context.Context, in *CheckPermissions, opts ...grpc.CallOption) (*Nothing, error)
	CheckCardPermission(ctx context.Context, in *CheckPermissions, opts ...grpc.CallOption) (*Nothing, error)
	CheckTaskPermission(ctx context.Context, in *CheckPermissions, opts ...grpc.CallOption) (*Nothing, error)
}

type boardClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardClient(cc grpc.ClientConnInterface) BoardClient {
	return &boardClient{cc}
}

func (c *boardClient) GetBoardsList(ctx context.Context, in *profile.UserID, opts ...grpc.CallOption) (*profile.BoardsOutsideShort, error) {
	out := new(profile.BoardsOutsideShort)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/GetBoardsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CreateBoard(ctx context.Context, in *BoardChangeInput, opts ...grpc.CallOption) (*profile.BoardOutsideShort, error) {
	out := new(profile.BoardOutsideShort)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CreateBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetBoard(ctx context.Context, in *BoardInput, opts ...grpc.CallOption) (*BoardOutside, error) {
	out := new(BoardOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/GetBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ChangeBoard(ctx context.Context, in *BoardChangeInput, opts ...grpc.CallOption) (*BoardOutside, error) {
	out := new(BoardOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/ChangeBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteBoard(ctx context.Context, in *BoardInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DeleteBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CreateCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*CardOutside, error) {
	out := new(CardOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*CardOutside, error) {
	out := new(CardOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/GetCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ChangeCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*CardOutside, error) {
	out := new(CardOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/ChangeCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteCard(ctx context.Context, in *CardInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CardOrderChange(ctx context.Context, in *CardsOrderInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CardOrderChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CreateTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutside, error) {
	out := new(TaskOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutside, error) {
	out := new(TaskOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ChangeTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskOutside, error) {
	out := new(TaskOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/ChangeTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteTask(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) TasksOrderChange(ctx context.Context, in *TasksOrderInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/TasksOrderChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) AssignUser(ctx context.Context, in *TaskAssigner, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/AssignUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DismissUser(ctx context.Context, in *TaskAssigner, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DismissUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) GetAssigners(ctx context.Context, in *TaskInput, opts ...grpc.CallOption) (*TaskAssignerIDs, error) {
	out := new(TaskAssignerIDs)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/GetAssigners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CreateTag(ctx context.Context, in *TagInput, opts ...grpc.CallOption) (*TagOutside, error) {
	out := new(TagOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ChangeTag(ctx context.Context, in *TagInput, opts ...grpc.CallOption) (*TagOutside, error) {
	out := new(TagOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/ChangeTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteTag(ctx context.Context, in *TagInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) AddTag(ctx context.Context, in *TaskTagInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/AddTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) RemoveTag(ctx context.Context, in *TaskTagInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/RemoveTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CreateComment(ctx context.Context, in *CommentInput, opts ...grpc.CallOption) (*CommentOutside, error) {
	out := new(CommentOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ChangeComment(ctx context.Context, in *CommentInput, opts ...grpc.CallOption) (*CommentOutside, error) {
	out := new(CommentOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/ChangeComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteComment(ctx context.Context, in *CommentInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CreateChecklist(ctx context.Context, in *ChecklistInput, opts ...grpc.CallOption) (*ChecklistOutside, error) {
	out := new(ChecklistOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CreateChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) ChangeChecklist(ctx context.Context, in *ChecklistInput, opts ...grpc.CallOption) (*ChecklistOutside, error) {
	out := new(ChecklistOutside)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/ChangeChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) DeleteChecklist(ctx context.Context, in *ChecklistInput, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/DeleteChecklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CheckBoardPermission(ctx context.Context, in *CheckPermissions, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CheckBoardPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CheckCardPermission(ctx context.Context, in *CheckPermissions, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CheckCardPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardClient) CheckTaskPermission(ctx context.Context, in *CheckPermissions, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/protoBoard.Board/CheckTaskPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServer is the server API for Board service.
type BoardServer interface {
	GetBoardsList(context.Context, *profile.UserID) (*profile.BoardsOutsideShort, error)
	CreateBoard(context.Context, *BoardChangeInput) (*profile.BoardOutsideShort, error)
	GetBoard(context.Context, *BoardInput) (*BoardOutside, error)
	ChangeBoard(context.Context, *BoardChangeInput) (*BoardOutside, error)
	DeleteBoard(context.Context, *BoardInput) (*Nothing, error)
	CreateCard(context.Context, *CardInput) (*CardOutside, error)
	GetCard(context.Context, *CardInput) (*CardOutside, error)
	ChangeCard(context.Context, *CardInput) (*CardOutside, error)
	DeleteCard(context.Context, *CardInput) (*Nothing, error)
	CardOrderChange(context.Context, *CardsOrderInput) (*Nothing, error)
	CreateTask(context.Context, *TaskInput) (*TaskOutside, error)
	GetTask(context.Context, *TaskInput) (*TaskOutside, error)
	ChangeTask(context.Context, *TaskInput) (*TaskOutside, error)
	DeleteTask(context.Context, *TaskInput) (*Nothing, error)
	TasksOrderChange(context.Context, *TasksOrderInput) (*Nothing, error)
	AssignUser(context.Context, *TaskAssigner) (*Nothing, error)
	DismissUser(context.Context, *TaskAssigner) (*Nothing, error)
	GetAssigners(context.Context, *TaskInput) (*TaskAssignerIDs, error)
	CreateTag(context.Context, *TagInput) (*TagOutside, error)
	ChangeTag(context.Context, *TagInput) (*TagOutside, error)
	DeleteTag(context.Context, *TagInput) (*Nothing, error)
	AddTag(context.Context, *TaskTagInput) (*Nothing, error)
	RemoveTag(context.Context, *TaskTagInput) (*Nothing, error)
	CreateComment(context.Context, *CommentInput) (*CommentOutside, error)
	ChangeComment(context.Context, *CommentInput) (*CommentOutside, error)
	DeleteComment(context.Context, *CommentInput) (*Nothing, error)
	CreateChecklist(context.Context, *ChecklistInput) (*ChecklistOutside, error)
	ChangeChecklist(context.Context, *ChecklistInput) (*ChecklistOutside, error)
	DeleteChecklist(context.Context, *ChecklistInput) (*Nothing, error)
	CheckBoardPermission(context.Context, *CheckPermissions) (*Nothing, error)
	CheckCardPermission(context.Context, *CheckPermissions) (*Nothing, error)
	CheckTaskPermission(context.Context, *CheckPermissions) (*Nothing, error)
}

// UnimplementedBoardServer can be embedded to have forward compatible implementations.
type UnimplementedBoardServer struct {
}

func (*UnimplementedBoardServer) GetBoardsList(context.Context, *profile.UserID) (*profile.BoardsOutsideShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoardsList not implemented")
}
func (*UnimplementedBoardServer) CreateBoard(context.Context, *BoardChangeInput) (*profile.BoardOutsideShort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (*UnimplementedBoardServer) GetBoard(context.Context, *BoardInput) (*BoardOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBoard not implemented")
}
func (*UnimplementedBoardServer) ChangeBoard(context.Context, *BoardChangeInput) (*BoardOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBoard not implemented")
}
func (*UnimplementedBoardServer) DeleteBoard(context.Context, *BoardInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (*UnimplementedBoardServer) CreateCard(context.Context, *CardInput) (*CardOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (*UnimplementedBoardServer) GetCard(context.Context, *CardInput) (*CardOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCard not implemented")
}
func (*UnimplementedBoardServer) ChangeCard(context.Context, *CardInput) (*CardOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCard not implemented")
}
func (*UnimplementedBoardServer) DeleteCard(context.Context, *CardInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (*UnimplementedBoardServer) CardOrderChange(context.Context, *CardsOrderInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardOrderChange not implemented")
}
func (*UnimplementedBoardServer) CreateTask(context.Context, *TaskInput) (*TaskOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (*UnimplementedBoardServer) GetTask(context.Context, *TaskInput) (*TaskOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedBoardServer) ChangeTask(context.Context, *TaskInput) (*TaskOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTask not implemented")
}
func (*UnimplementedBoardServer) DeleteTask(context.Context, *TaskInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (*UnimplementedBoardServer) TasksOrderChange(context.Context, *TasksOrderInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksOrderChange not implemented")
}
func (*UnimplementedBoardServer) AssignUser(context.Context, *TaskAssigner) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignUser not implemented")
}
func (*UnimplementedBoardServer) DismissUser(context.Context, *TaskAssigner) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DismissUser not implemented")
}
func (*UnimplementedBoardServer) GetAssigners(context.Context, *TaskInput) (*TaskAssignerIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssigners not implemented")
}
func (*UnimplementedBoardServer) CreateTag(context.Context, *TagInput) (*TagOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedBoardServer) ChangeTag(context.Context, *TagInput) (*TagOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTag not implemented")
}
func (*UnimplementedBoardServer) DeleteTag(context.Context, *TagInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (*UnimplementedBoardServer) AddTag(context.Context, *TaskTagInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTag not implemented")
}
func (*UnimplementedBoardServer) RemoveTag(context.Context, *TaskTagInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTag not implemented")
}
func (*UnimplementedBoardServer) CreateComment(context.Context, *CommentInput) (*CommentOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (*UnimplementedBoardServer) ChangeComment(context.Context, *CommentInput) (*CommentOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeComment not implemented")
}
func (*UnimplementedBoardServer) DeleteComment(context.Context, *CommentInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (*UnimplementedBoardServer) CreateChecklist(context.Context, *ChecklistInput) (*ChecklistOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChecklist not implemented")
}
func (*UnimplementedBoardServer) ChangeChecklist(context.Context, *ChecklistInput) (*ChecklistOutside, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeChecklist not implemented")
}
func (*UnimplementedBoardServer) DeleteChecklist(context.Context, *ChecklistInput) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChecklist not implemented")
}
func (*UnimplementedBoardServer) CheckBoardPermission(context.Context, *CheckPermissions) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBoardPermission not implemented")
}
func (*UnimplementedBoardServer) CheckCardPermission(context.Context, *CheckPermissions) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCardPermission not implemented")
}
func (*UnimplementedBoardServer) CheckTaskPermission(context.Context, *CheckPermissions) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTaskPermission not implemented")
}

func RegisterBoardServer(s *grpc.Server, srv BoardServer) {
	s.RegisterService(&_Board_serviceDesc, srv)
}

func _Board_GetBoardsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(profile.UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetBoardsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/GetBoardsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetBoardsList(ctx, req.(*profile.UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardChangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CreateBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateBoard(ctx, req.(*BoardChangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/GetBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetBoard(ctx, req.(*BoardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ChangeBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardChangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ChangeBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/ChangeBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ChangeBoard(ctx, req.(*BoardChangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DeleteBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteBoard(ctx, req.(*BoardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateCard(ctx, req.(*CardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/GetCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetCard(ctx, req.(*CardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ChangeCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ChangeCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/ChangeCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ChangeCard(ctx, req.(*CardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteCard(ctx, req.(*CardInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CardOrderChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsOrderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CardOrderChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CardOrderChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CardOrderChange(ctx, req.(*CardsOrderInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ChangeTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ChangeTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/ChangeTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ChangeTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteTask(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_TasksOrderChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksOrderInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).TasksOrderChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/TasksOrderChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).TasksOrderChange(ctx, req.(*TasksOrderInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_AssignUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).AssignUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/AssignUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).AssignUser(ctx, req.(*TaskAssigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DismissUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssigner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DismissUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DismissUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DismissUser(ctx, req.(*TaskAssigner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_GetAssigners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).GetAssigners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/GetAssigners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).GetAssigners(ctx, req.(*TaskInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateTag(ctx, req.(*TagInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ChangeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ChangeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/ChangeTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ChangeTag(ctx, req.(*TagInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteTag(ctx, req.(*TagInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_AddTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTagInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).AddTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/AddTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).AddTag(ctx, req.(*TaskTagInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_RemoveTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskTagInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).RemoveTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/RemoveTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).RemoveTag(ctx, req.(*TaskTagInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateComment(ctx, req.(*CommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ChangeComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ChangeComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/ChangeComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ChangeComment(ctx, req.(*CommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteComment(ctx, req.(*CommentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CreateChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChecklistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CreateChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CreateChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CreateChecklist(ctx, req.(*ChecklistInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_ChangeChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChecklistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).ChangeChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/ChangeChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).ChangeChecklist(ctx, req.(*ChecklistInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_DeleteChecklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChecklistInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).DeleteChecklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/DeleteChecklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).DeleteChecklist(ctx, req.(*ChecklistInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CheckBoardPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CheckBoardPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CheckBoardPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CheckBoardPermission(ctx, req.(*CheckPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CheckCardPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CheckCardPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CheckCardPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CheckCardPermission(ctx, req.(*CheckPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Board_CheckTaskPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServer).CheckTaskPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBoard.Board/CheckTaskPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServer).CheckTaskPermission(ctx, req.(*CheckPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

var _Board_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBoard.Board",
	HandlerType: (*BoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBoardsList",
			Handler:    _Board_GetBoardsList_Handler,
		},
		{
			MethodName: "CreateBoard",
			Handler:    _Board_CreateBoard_Handler,
		},
		{
			MethodName: "GetBoard",
			Handler:    _Board_GetBoard_Handler,
		},
		{
			MethodName: "ChangeBoard",
			Handler:    _Board_ChangeBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _Board_DeleteBoard_Handler,
		},
		{
			MethodName: "CreateCard",
			Handler:    _Board_CreateCard_Handler,
		},
		{
			MethodName: "GetCard",
			Handler:    _Board_GetCard_Handler,
		},
		{
			MethodName: "ChangeCard",
			Handler:    _Board_ChangeCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Board_DeleteCard_Handler,
		},
		{
			MethodName: "CardOrderChange",
			Handler:    _Board_CardOrderChange_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _Board_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Board_GetTask_Handler,
		},
		{
			MethodName: "ChangeTask",
			Handler:    _Board_ChangeTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Board_DeleteTask_Handler,
		},
		{
			MethodName: "TasksOrderChange",
			Handler:    _Board_TasksOrderChange_Handler,
		},
		{
			MethodName: "AssignUser",
			Handler:    _Board_AssignUser_Handler,
		},
		{
			MethodName: "DismissUser",
			Handler:    _Board_DismissUser_Handler,
		},
		{
			MethodName: "GetAssigners",
			Handler:    _Board_GetAssigners_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Board_CreateTag_Handler,
		},
		{
			MethodName: "ChangeTag",
			Handler:    _Board_ChangeTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _Board_DeleteTag_Handler,
		},
		{
			MethodName: "AddTag",
			Handler:    _Board_AddTag_Handler,
		},
		{
			MethodName: "RemoveTag",
			Handler:    _Board_RemoveTag_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Board_CreateComment_Handler,
		},
		{
			MethodName: "ChangeComment",
			Handler:    _Board_ChangeComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Board_DeleteComment_Handler,
		},
		{
			MethodName: "CreateChecklist",
			Handler:    _Board_CreateChecklist_Handler,
		},
		{
			MethodName: "ChangeChecklist",
			Handler:    _Board_ChangeChecklist_Handler,
		},
		{
			MethodName: "DeleteChecklist",
			Handler:    _Board_DeleteChecklist_Handler,
		},
		{
			MethodName: "CheckBoardPermission",
			Handler:    _Board_CheckBoardPermission_Handler,
		},
		{
			MethodName: "CheckCardPermission",
			Handler:    _Board_CheckCardPermission_Handler,
		},
		{
			MethodName: "CheckTaskPermission",
			Handler:    _Board_CheckTaskPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board/board.proto",
}
