// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/services/board_service/internal/boardStorage (interfaces: BoardStorage)

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_ExtraSafe/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBoardStorage is a mock of BoardStorage interface
type MockBoardStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBoardStorageMockRecorder
}

// MockBoardStorageMockRecorder is the mock recorder for MockBoardStorage
type MockBoardStorageMockRecorder struct {
	mock *MockBoardStorage
}

// NewMockBoardStorage creates a new mock instance
func NewMockBoardStorage(ctrl *gomock.Controller) *MockBoardStorage {
	mock := &MockBoardStorage{ctrl: ctrl}
	mock.recorder = &MockBoardStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoardStorage) EXPECT() *MockBoardStorageMockRecorder {
	return m.recorder
}

// AddAttachment mocks base method
func (m *MockBoardStorage) AddAttachment(arg0 models.AttachmentInternal) (models.AttachmentOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttachment", arg0)
	ret0, _ := ret[0].(models.AttachmentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttachment indicates an expected call of AddAttachment
func (mr *MockBoardStorageMockRecorder) AddAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttachment", reflect.TypeOf((*MockBoardStorage)(nil).AddAttachment), arg0)
}

// AddTag mocks base method
func (m *MockBoardStorage) AddTag(arg0 models.TaskTagInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTag indicates an expected call of AddTag
func (mr *MockBoardStorageMockRecorder) AddTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockBoardStorage)(nil).AddTag), arg0)
}

// AddUser mocks base method
func (m *MockBoardStorage) AddUser(arg0 models.BoardMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockBoardStorageMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockBoardStorage)(nil).AddUser), arg0)
}

// AssignUser mocks base method
func (m *MockBoardStorage) AssignUser(arg0 models.TaskAssigner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUser indicates an expected call of AssignUser
func (mr *MockBoardStorageMockRecorder) AssignUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUser", reflect.TypeOf((*MockBoardStorage)(nil).AssignUser), arg0)
}

// ChangeBoard mocks base method
func (m *MockBoardStorage) ChangeBoard(arg0 models.BoardChangeInput) (models.BoardInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBoard", arg0)
	ret0, _ := ret[0].(models.BoardInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBoard indicates an expected call of ChangeBoard
func (mr *MockBoardStorageMockRecorder) ChangeBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBoard", reflect.TypeOf((*MockBoardStorage)(nil).ChangeBoard), arg0)
}

// ChangeCard mocks base method
func (m *MockBoardStorage) ChangeCard(arg0 models.CardInput) (models.CardInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCard", arg0)
	ret0, _ := ret[0].(models.CardInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCard indicates an expected call of ChangeCard
func (mr *MockBoardStorageMockRecorder) ChangeCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCard", reflect.TypeOf((*MockBoardStorage)(nil).ChangeCard), arg0)
}

// ChangeCardOrder mocks base method
func (m *MockBoardStorage) ChangeCardOrder(arg0 models.CardsOrderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCardOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCardOrder indicates an expected call of ChangeCardOrder
func (mr *MockBoardStorageMockRecorder) ChangeCardOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCardOrder", reflect.TypeOf((*MockBoardStorage)(nil).ChangeCardOrder), arg0)
}

// ChangeTask mocks base method
func (m *MockBoardStorage) ChangeTask(arg0 models.TaskInput) (models.TaskInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTask", arg0)
	ret0, _ := ret[0].(models.TaskInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTask indicates an expected call of ChangeTask
func (mr *MockBoardStorageMockRecorder) ChangeTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTask", reflect.TypeOf((*MockBoardStorage)(nil).ChangeTask), arg0)
}

// ChangeTaskOrder mocks base method
func (m *MockBoardStorage) ChangeTaskOrder(arg0 models.TasksOrderInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTaskOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeTaskOrder indicates an expected call of ChangeTaskOrder
func (mr *MockBoardStorageMockRecorder) ChangeTaskOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTaskOrder", reflect.TypeOf((*MockBoardStorage)(nil).ChangeTaskOrder), arg0)
}

// CheckBoardPermission mocks base method
func (m *MockBoardStorage) CheckBoardPermission(arg0, arg1 int64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBoardPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBoardPermission indicates an expected call of CheckBoardPermission
func (mr *MockBoardStorageMockRecorder) CheckBoardPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBoardPermission", reflect.TypeOf((*MockBoardStorage)(nil).CheckBoardPermission), arg0, arg1, arg2)
}

// CheckCardPermission mocks base method
func (m *MockBoardStorage) CheckCardPermission(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCardPermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCardPermission indicates an expected call of CheckCardPermission
func (mr *MockBoardStorageMockRecorder) CheckCardPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCardPermission", reflect.TypeOf((*MockBoardStorage)(nil).CheckCardPermission), arg0, arg1)
}

// CheckCommentPermission mocks base method
func (m *MockBoardStorage) CheckCommentPermission(arg0, arg1 int64, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCommentPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCommentPermission indicates an expected call of CheckCommentPermission
func (mr *MockBoardStorageMockRecorder) CheckCommentPermission(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCommentPermission", reflect.TypeOf((*MockBoardStorage)(nil).CheckCommentPermission), arg0, arg1, arg2)
}

// CheckTaskPermission mocks base method
func (m *MockBoardStorage) CheckTaskPermission(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskPermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTaskPermission indicates an expected call of CheckTaskPermission
func (mr *MockBoardStorageMockRecorder) CheckTaskPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskPermission", reflect.TypeOf((*MockBoardStorage)(nil).CheckTaskPermission), arg0, arg1)
}

// CreateBoard mocks base method
func (m *MockBoardStorage) CreateBoard(arg0 models.BoardChangeInput) (models.BoardInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", arg0)
	ret0, _ := ret[0].(models.BoardInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockBoardStorageMockRecorder) CreateBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockBoardStorage)(nil).CreateBoard), arg0)
}

// CreateCard mocks base method
func (m *MockBoardStorage) CreateCard(arg0 models.CardInput) (models.CardOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0)
	ret0, _ := ret[0].(models.CardOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockBoardStorageMockRecorder) CreateCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockBoardStorage)(nil).CreateCard), arg0)
}

// CreateChecklist mocks base method
func (m *MockBoardStorage) CreateChecklist(arg0 models.ChecklistInput) (models.ChecklistOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChecklist", arg0)
	ret0, _ := ret[0].(models.ChecklistOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChecklist indicates an expected call of CreateChecklist
func (mr *MockBoardStorageMockRecorder) CreateChecklist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChecklist", reflect.TypeOf((*MockBoardStorage)(nil).CreateChecklist), arg0)
}

// CreateComment mocks base method
func (m *MockBoardStorage) CreateComment(arg0 models.CommentInput) (models.CommentOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0)
	ret0, _ := ret[0].(models.CommentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockBoardStorageMockRecorder) CreateComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockBoardStorage)(nil).CreateComment), arg0)
}

// CreateTag mocks base method
func (m *MockBoardStorage) CreateTag(arg0 models.TagInput) (models.TagOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0)
	ret0, _ := ret[0].(models.TagOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockBoardStorageMockRecorder) CreateTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockBoardStorage)(nil).CreateTag), arg0)
}

// CreateTask mocks base method
func (m *MockBoardStorage) CreateTask(arg0 models.TaskInput) (models.TaskInternalShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(models.TaskInternalShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockBoardStorageMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockBoardStorage)(nil).CreateTask), arg0)
}

// DeleteBoard mocks base method
func (m *MockBoardStorage) DeleteBoard(arg0 models.BoardInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoard indicates an expected call of DeleteBoard
func (mr *MockBoardStorageMockRecorder) DeleteBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockBoardStorage)(nil).DeleteBoard), arg0)
}

// DeleteCard mocks base method
func (m *MockBoardStorage) DeleteCard(arg0 models.CardInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard
func (mr *MockBoardStorageMockRecorder) DeleteCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockBoardStorage)(nil).DeleteCard), arg0)
}

// DeleteChecklist mocks base method
func (m *MockBoardStorage) DeleteChecklist(arg0 models.ChecklistInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChecklist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChecklist indicates an expected call of DeleteChecklist
func (mr *MockBoardStorageMockRecorder) DeleteChecklist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChecklist", reflect.TypeOf((*MockBoardStorage)(nil).DeleteChecklist), arg0)
}

// DeleteComment mocks base method
func (m *MockBoardStorage) DeleteComment(arg0 models.CommentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockBoardStorageMockRecorder) DeleteComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockBoardStorage)(nil).DeleteComment), arg0)
}

// DeleteTag mocks base method
func (m *MockBoardStorage) DeleteTag(arg0 models.TagInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockBoardStorageMockRecorder) DeleteTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockBoardStorage)(nil).DeleteTag), arg0)
}

// DeleteTask mocks base method
func (m *MockBoardStorage) DeleteTask(arg0 models.TaskInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *MockBoardStorageMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockBoardStorage)(nil).DeleteTask), arg0)
}

// DismissUser mocks base method
func (m *MockBoardStorage) DismissUser(arg0 models.TaskAssigner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DismissUser indicates an expected call of DismissUser
func (mr *MockBoardStorageMockRecorder) DismissUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissUser", reflect.TypeOf((*MockBoardStorage)(nil).DismissUser), arg0)
}

// GetBoard mocks base method
func (m *MockBoardStorage) GetBoard(arg0 models.BoardInput) (models.BoardInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", arg0)
	ret0, _ := ret[0].(models.BoardInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard
func (mr *MockBoardStorageMockRecorder) GetBoard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockBoardStorage)(nil).GetBoard), arg0)
}

// GetBoardsList mocks base method
func (m *MockBoardStorage) GetBoardsList(arg0 models.UserInput) ([]models.BoardOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsList", arg0)
	ret0, _ := ret[0].([]models.BoardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsList indicates an expected call of GetBoardsList
func (mr *MockBoardStorageMockRecorder) GetBoardsList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsList", reflect.TypeOf((*MockBoardStorage)(nil).GetBoardsList), arg0)
}

// GetCard mocks base method
func (m *MockBoardStorage) GetCard(arg0 models.CardInput) (models.CardInternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", arg0)
	ret0, _ := ret[0].(models.CardInternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard
func (mr *MockBoardStorageMockRecorder) GetCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockBoardStorage)(nil).GetCard), arg0)
}

// GetTask mocks base method
func (m *MockBoardStorage) GetTask(arg0 models.TaskInput) (models.TaskInternal, []int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0)
	ret0, _ := ret[0].(models.TaskInternal)
	ret1, _ := ret[1].([]int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTask indicates an expected call of GetTask
func (mr *MockBoardStorageMockRecorder) GetTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockBoardStorage)(nil).GetTask), arg0)
}

// RemoveAttachment mocks base method
func (m *MockBoardStorage) RemoveAttachment(arg0 models.AttachmentInternal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAttachment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAttachment indicates an expected call of RemoveAttachment
func (mr *MockBoardStorageMockRecorder) RemoveAttachment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAttachment", reflect.TypeOf((*MockBoardStorage)(nil).RemoveAttachment), arg0)
}

// RemoveTag mocks base method
func (m *MockBoardStorage) RemoveTag(arg0 models.TaskTagInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag
func (mr *MockBoardStorageMockRecorder) RemoveTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockBoardStorage)(nil).RemoveTag), arg0)
}

// RemoveUser mocks base method
func (m *MockBoardStorage) RemoveUser(arg0 models.BoardMember) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockBoardStorageMockRecorder) RemoveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockBoardStorage)(nil).RemoveUser), arg0)
}

// UpdateChecklist mocks base method
func (m *MockBoardStorage) UpdateChecklist(arg0 models.ChecklistInput) (models.ChecklistOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChecklist", arg0)
	ret0, _ := ret[0].(models.ChecklistOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChecklist indicates an expected call of UpdateChecklist
func (mr *MockBoardStorageMockRecorder) UpdateChecklist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChecklist", reflect.TypeOf((*MockBoardStorage)(nil).UpdateChecklist), arg0)
}

// UpdateComment mocks base method
func (m *MockBoardStorage) UpdateComment(arg0 models.CommentInput) (models.CommentOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0)
	ret0, _ := ret[0].(models.CommentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockBoardStorageMockRecorder) UpdateComment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockBoardStorage)(nil).UpdateComment), arg0)
}

// UpdateTag mocks base method
func (m *MockBoardStorage) UpdateTag(arg0 models.TagInput) (models.TagOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", arg0)
	ret0, _ := ret[0].(models.TagOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag
func (mr *MockBoardStorageMockRecorder) UpdateTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockBoardStorage)(nil).UpdateTag), arg0)
}
