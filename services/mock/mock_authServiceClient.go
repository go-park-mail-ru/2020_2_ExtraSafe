// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/auth (interfaces: AuthClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	protoAuth "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/auth"
	protoProfile "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/profile"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockAuthClient is a mock of AuthClient interface
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// Auth mocks base method
func (m *MockAuthClient) Auth(arg0 context.Context, arg1 *protoProfile.UserID, arg2 ...grpc.CallOption) (*protoProfile.UserBoardsOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Auth", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserBoardsOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth
func (mr *MockAuthClientMockRecorder) Auth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthClient)(nil).Auth), varargs...)
}

// CheckCookie mocks base method
func (m *MockAuthClient) CheckCookie(arg0 context.Context, arg1 *protoAuth.UserSession, arg2 ...grpc.CallOption) (*protoProfile.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCookie", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCookie indicates an expected call of CheckCookie
func (mr *MockAuthClientMockRecorder) CheckCookie(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockAuthClient)(nil).CheckCookie), varargs...)
}

// DeleteCookie mocks base method
func (m *MockAuthClient) DeleteCookie(arg0 context.Context, arg1 *protoAuth.UserSession, arg2 ...grpc.CallOption) (*protoAuth.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCookie", varargs...)
	ret0, _ := ret[0].(*protoAuth.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCookie indicates an expected call of DeleteCookie
func (mr *MockAuthClientMockRecorder) DeleteCookie(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockAuthClient)(nil).DeleteCookie), varargs...)
}

// Login mocks base method
func (m *MockAuthClient) Login(arg0 context.Context, arg1 *protoProfile.UserInputLogin, arg2 ...grpc.CallOption) (*protoAuth.UserSession, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*protoAuth.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockAuthClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthClient)(nil).Login), varargs...)
}

// Registration mocks base method
func (m *MockAuthClient) Registration(arg0 context.Context, arg1 *protoProfile.UserInputReg, arg2 ...grpc.CallOption) (*protoAuth.UserSession, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Registration", varargs...)
	ret0, _ := ret[0].(*protoAuth.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration
func (mr *MockAuthClientMockRecorder) Registration(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockAuthClient)(nil).Registration), varargs...)
}
