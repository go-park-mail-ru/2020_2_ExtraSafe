// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/profile (interfaces: ProfileClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	protoProfile "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/profile"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockProfileClient is a mock of ProfileClient interface
type MockProfileClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileClientMockRecorder
}

// MockProfileClientMockRecorder is the mock recorder for MockProfileClient
type MockProfileClientMockRecorder struct {
	mock *MockProfileClient
}

// NewMockProfileClient creates a new mock instance
func NewMockProfileClient(ctrl *gomock.Controller) *MockProfileClient {
	mock := &MockProfileClient{ctrl: ctrl}
	mock.recorder = &MockProfileClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileClient) EXPECT() *MockProfileClientMockRecorder {
	return m.recorder
}

// Boards mocks base method
func (m *MockProfileClient) Boards(arg0 context.Context, arg1 *protoProfile.UserID, arg2 ...grpc.CallOption) (*protoProfile.BoardsOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Boards", varargs...)
	ret0, _ := ret[0].(*protoProfile.BoardsOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Boards indicates an expected call of Boards
func (mr *MockProfileClientMockRecorder) Boards(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boards", reflect.TypeOf((*MockProfileClient)(nil).Boards), varargs...)
}

// CheckUser mocks base method
func (m *MockProfileClient) CheckUser(arg0 context.Context, arg1 *protoProfile.UserInputLogin, arg2 ...grpc.CallOption) (*protoProfile.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckUser", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser
func (mr *MockProfileClientMockRecorder) CheckUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockProfileClient)(nil).CheckUser), varargs...)
}

// CreateUser mocks base method
func (m *MockProfileClient) CreateUser(arg0 context.Context, arg1 *protoProfile.UserInputReg, arg2 ...grpc.CallOption) (*protoProfile.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockProfileClientMockRecorder) CreateUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockProfileClient)(nil).CreateUser), varargs...)
}

// GetUserByUsername mocks base method
func (m *MockProfileClient) GetUserByUsername(arg0 context.Context, arg1 *protoProfile.UserName, arg2 ...grpc.CallOption) (*protoProfile.UserOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByUsername", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername
func (mr *MockProfileClientMockRecorder) GetUserByUsername(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockProfileClient)(nil).GetUserByUsername), varargs...)
}

// GetUsersByIDs mocks base method
func (m *MockProfileClient) GetUsersByIDs(arg0 context.Context, arg1 *protoProfile.UserIDS, arg2 ...grpc.CallOption) (*protoProfile.UsersOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsersByIDs", varargs...)
	ret0, _ := ret[0].(*protoProfile.UsersOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersByIDs indicates an expected call of GetUsersByIDs
func (mr *MockProfileClientMockRecorder) GetUsersByIDs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersByIDs", reflect.TypeOf((*MockProfileClient)(nil).GetUsersByIDs), varargs...)
}

// PasswordChange mocks base method
func (m *MockProfileClient) PasswordChange(arg0 context.Context, arg1 *protoProfile.UserInputPassword, arg2 ...grpc.CallOption) (*protoProfile.UserOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PasswordChange", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordChange indicates an expected call of PasswordChange
func (mr *MockProfileClientMockRecorder) PasswordChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordChange", reflect.TypeOf((*MockProfileClient)(nil).PasswordChange), varargs...)
}

// Profile mocks base method
func (m *MockProfileClient) Profile(arg0 context.Context, arg1 *protoProfile.UserID, arg2 ...grpc.CallOption) (*protoProfile.UserOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Profile", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile
func (mr *MockProfileClientMockRecorder) Profile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockProfileClient)(nil).Profile), varargs...)
}

// ProfileChange mocks base method
func (m *MockProfileClient) ProfileChange(arg0 context.Context, arg1 *protoProfile.UserInputProfile, arg2 ...grpc.CallOption) (*protoProfile.UserOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProfileChange", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProfileChange indicates an expected call of ProfileChange
func (mr *MockProfileClientMockRecorder) ProfileChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileChange", reflect.TypeOf((*MockProfileClient)(nil).ProfileChange), varargs...)
}
