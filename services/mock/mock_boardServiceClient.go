// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/board (interfaces: BoardClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	protoBoard "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/board"
	protoProfile "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/profile"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockBoardClient is a mock of BoardClient interface
type MockBoardClient struct {
	ctrl     *gomock.Controller
	recorder *MockBoardClientMockRecorder
}

// MockBoardClientMockRecorder is the mock recorder for MockBoardClient
type MockBoardClientMockRecorder struct {
	mock *MockBoardClient
}

// NewMockBoardClient creates a new mock instance
func NewMockBoardClient(ctrl *gomock.Controller) *MockBoardClient {
	mock := &MockBoardClient{ctrl: ctrl}
	mock.recorder = &MockBoardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBoardClient) EXPECT() *MockBoardClientMockRecorder {
	return m.recorder
}

// AddAttachment mocks base method
func (m *MockBoardClient) AddAttachment(arg0 context.Context, arg1 ...grpc.CallOption) (protoBoard.Board_AddAttachmentClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAttachment", varargs...)
	ret0, _ := ret[0].(protoBoard.Board_AddAttachmentClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttachment indicates an expected call of AddAttachment
func (mr *MockBoardClientMockRecorder) AddAttachment(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttachment", reflect.TypeOf((*MockBoardClient)(nil).AddAttachment), varargs...)
}

// AddTag mocks base method
func (m *MockBoardClient) AddTag(arg0 context.Context, arg1 *protoBoard.TaskTagInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTag", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTag indicates an expected call of AddTag
func (mr *MockBoardClientMockRecorder) AddTag(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockBoardClient)(nil).AddTag), varargs...)
}

// AddUserToBoard mocks base method
func (m *MockBoardClient) AddUserToBoard(arg0 context.Context, arg1 *protoBoard.BoardMemberInput, arg2 ...grpc.CallOption) (*protoProfile.UserOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUserToBoard", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToBoard indicates an expected call of AddUserToBoard
func (mr *MockBoardClientMockRecorder) AddUserToBoard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBoard", reflect.TypeOf((*MockBoardClient)(nil).AddUserToBoard), varargs...)
}

// AssignUser mocks base method
func (m *MockBoardClient) AssignUser(arg0 context.Context, arg1 *protoBoard.TaskAssignerInput, arg2 ...grpc.CallOption) (*protoProfile.UserOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AssignUser", varargs...)
	ret0, _ := ret[0].(*protoProfile.UserOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUser indicates an expected call of AssignUser
func (mr *MockBoardClientMockRecorder) AssignUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUser", reflect.TypeOf((*MockBoardClient)(nil).AssignUser), varargs...)
}

// CardOrderChange mocks base method
func (m *MockBoardClient) CardOrderChange(arg0 context.Context, arg1 *protoBoard.CardsOrderInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CardOrderChange", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardOrderChange indicates an expected call of CardOrderChange
func (mr *MockBoardClientMockRecorder) CardOrderChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardOrderChange", reflect.TypeOf((*MockBoardClient)(nil).CardOrderChange), varargs...)
}

// ChangeBoard mocks base method
func (m *MockBoardClient) ChangeBoard(arg0 context.Context, arg1 *protoBoard.BoardChangeInput, arg2 ...grpc.CallOption) (*protoProfile.BoardOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeBoard", varargs...)
	ret0, _ := ret[0].(*protoProfile.BoardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBoard indicates an expected call of ChangeBoard
func (mr *MockBoardClientMockRecorder) ChangeBoard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBoard", reflect.TypeOf((*MockBoardClient)(nil).ChangeBoard), varargs...)
}

// ChangeCard mocks base method
func (m *MockBoardClient) ChangeCard(arg0 context.Context, arg1 *protoBoard.CardInput, arg2 ...grpc.CallOption) (*protoBoard.CardOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeCard", varargs...)
	ret0, _ := ret[0].(*protoBoard.CardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCard indicates an expected call of ChangeCard
func (mr *MockBoardClientMockRecorder) ChangeCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCard", reflect.TypeOf((*MockBoardClient)(nil).ChangeCard), varargs...)
}

// ChangeChecklist mocks base method
func (m *MockBoardClient) ChangeChecklist(arg0 context.Context, arg1 *protoBoard.ChecklistInput, arg2 ...grpc.CallOption) (*protoBoard.ChecklistOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeChecklist", varargs...)
	ret0, _ := ret[0].(*protoBoard.ChecklistOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeChecklist indicates an expected call of ChangeChecklist
func (mr *MockBoardClientMockRecorder) ChangeChecklist(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeChecklist", reflect.TypeOf((*MockBoardClient)(nil).ChangeChecklist), varargs...)
}

// ChangeComment mocks base method
func (m *MockBoardClient) ChangeComment(arg0 context.Context, arg1 *protoBoard.CommentInput, arg2 ...grpc.CallOption) (*protoBoard.CommentOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeComment", varargs...)
	ret0, _ := ret[0].(*protoBoard.CommentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeComment indicates an expected call of ChangeComment
func (mr *MockBoardClientMockRecorder) ChangeComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeComment", reflect.TypeOf((*MockBoardClient)(nil).ChangeComment), varargs...)
}

// ChangeTag mocks base method
func (m *MockBoardClient) ChangeTag(arg0 context.Context, arg1 *protoBoard.TagInput, arg2 ...grpc.CallOption) (*protoBoard.TagOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeTag", varargs...)
	ret0, _ := ret[0].(*protoBoard.TagOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTag indicates an expected call of ChangeTag
func (mr *MockBoardClientMockRecorder) ChangeTag(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTag", reflect.TypeOf((*MockBoardClient)(nil).ChangeTag), varargs...)
}

// ChangeTask mocks base method
func (m *MockBoardClient) ChangeTask(arg0 context.Context, arg1 *protoBoard.TaskInput, arg2 ...grpc.CallOption) (*protoBoard.TaskOutsideSuperShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeTask", varargs...)
	ret0, _ := ret[0].(*protoBoard.TaskOutsideSuperShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTask indicates an expected call of ChangeTask
func (mr *MockBoardClientMockRecorder) ChangeTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTask", reflect.TypeOf((*MockBoardClient)(nil).ChangeTask), varargs...)
}

// CheckBoardPermission mocks base method
func (m *MockBoardClient) CheckBoardPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckBoardPermission", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBoardPermission indicates an expected call of CheckBoardPermission
func (mr *MockBoardClientMockRecorder) CheckBoardPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBoardPermission", reflect.TypeOf((*MockBoardClient)(nil).CheckBoardPermission), varargs...)
}

// CheckCardPermission mocks base method
func (m *MockBoardClient) CheckCardPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCardPermission", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCardPermission indicates an expected call of CheckCardPermission
func (mr *MockBoardClientMockRecorder) CheckCardPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCardPermission", reflect.TypeOf((*MockBoardClient)(nil).CheckCardPermission), varargs...)
}

// CheckCommentPermission mocks base method
func (m *MockBoardClient) CheckCommentPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckCommentPermission", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCommentPermission indicates an expected call of CheckCommentPermission
func (mr *MockBoardClientMockRecorder) CheckCommentPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCommentPermission", reflect.TypeOf((*MockBoardClient)(nil).CheckCommentPermission), varargs...)
}

// CheckTaskPermission mocks base method
func (m *MockBoardClient) CheckTaskPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTaskPermission", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskPermission indicates an expected call of CheckTaskPermission
func (mr *MockBoardClientMockRecorder) CheckTaskPermission(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskPermission", reflect.TypeOf((*MockBoardClient)(nil).CheckTaskPermission), varargs...)
}

// CreateBoard mocks base method
func (m *MockBoardClient) CreateBoard(arg0 context.Context, arg1 *protoBoard.BoardChangeInput, arg2 ...grpc.CallOption) (*protoProfile.BoardOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBoard", varargs...)
	ret0, _ := ret[0].(*protoProfile.BoardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockBoardClientMockRecorder) CreateBoard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockBoardClient)(nil).CreateBoard), varargs...)
}

// CreateCard mocks base method
func (m *MockBoardClient) CreateCard(arg0 context.Context, arg1 *protoBoard.CardInput, arg2 ...grpc.CallOption) (*protoBoard.CardOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCard", varargs...)
	ret0, _ := ret[0].(*protoBoard.CardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockBoardClientMockRecorder) CreateCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockBoardClient)(nil).CreateCard), varargs...)
}

// CreateChecklist mocks base method
func (m *MockBoardClient) CreateChecklist(arg0 context.Context, arg1 *protoBoard.ChecklistInput, arg2 ...grpc.CallOption) (*protoBoard.ChecklistOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChecklist", varargs...)
	ret0, _ := ret[0].(*protoBoard.ChecklistOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChecklist indicates an expected call of CreateChecklist
func (mr *MockBoardClientMockRecorder) CreateChecklist(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChecklist", reflect.TypeOf((*MockBoardClient)(nil).CreateChecklist), varargs...)
}

// CreateComment mocks base method
func (m *MockBoardClient) CreateComment(arg0 context.Context, arg1 *protoBoard.CommentInput, arg2 ...grpc.CallOption) (*protoBoard.CommentOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComment", varargs...)
	ret0, _ := ret[0].(*protoBoard.CommentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockBoardClientMockRecorder) CreateComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockBoardClient)(nil).CreateComment), varargs...)
}

// CreateTag mocks base method
func (m *MockBoardClient) CreateTag(arg0 context.Context, arg1 *protoBoard.TagInput, arg2 ...grpc.CallOption) (*protoBoard.TagOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTag", varargs...)
	ret0, _ := ret[0].(*protoBoard.TagOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockBoardClientMockRecorder) CreateTag(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockBoardClient)(nil).CreateTag), varargs...)
}

// CreateTask mocks base method
func (m *MockBoardClient) CreateTask(arg0 context.Context, arg1 *protoBoard.TaskInput, arg2 ...grpc.CallOption) (*protoBoard.TaskOutsideSuperShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTask", varargs...)
	ret0, _ := ret[0].(*protoBoard.TaskOutsideSuperShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockBoardClientMockRecorder) CreateTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockBoardClient)(nil).CreateTask), varargs...)
}

// DeleteBoard mocks base method
func (m *MockBoardClient) DeleteBoard(arg0 context.Context, arg1 *protoBoard.BoardInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBoard", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBoard indicates an expected call of DeleteBoard
func (mr *MockBoardClientMockRecorder) DeleteBoard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockBoardClient)(nil).DeleteBoard), varargs...)
}

// DeleteCard mocks base method
func (m *MockBoardClient) DeleteCard(arg0 context.Context, arg1 *protoBoard.CardInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCard", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard
func (mr *MockBoardClientMockRecorder) DeleteCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockBoardClient)(nil).DeleteCard), varargs...)
}

// DeleteChecklist mocks base method
func (m *MockBoardClient) DeleteChecklist(arg0 context.Context, arg1 *protoBoard.ChecklistInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteChecklist", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChecklist indicates an expected call of DeleteChecklist
func (mr *MockBoardClientMockRecorder) DeleteChecklist(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChecklist", reflect.TypeOf((*MockBoardClient)(nil).DeleteChecklist), varargs...)
}

// DeleteComment mocks base method
func (m *MockBoardClient) DeleteComment(arg0 context.Context, arg1 *protoBoard.CommentInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteComment", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockBoardClientMockRecorder) DeleteComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockBoardClient)(nil).DeleteComment), varargs...)
}

// DeleteTag mocks base method
func (m *MockBoardClient) DeleteTag(arg0 context.Context, arg1 *protoBoard.TagInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTag", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockBoardClientMockRecorder) DeleteTag(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockBoardClient)(nil).DeleteTag), varargs...)
}

// DeleteTask mocks base method
func (m *MockBoardClient) DeleteTask(arg0 context.Context, arg1 *protoBoard.TaskInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTask", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *MockBoardClientMockRecorder) DeleteTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockBoardClient)(nil).DeleteTask), varargs...)
}

// DismissUser mocks base method
func (m *MockBoardClient) DismissUser(arg0 context.Context, arg1 *protoBoard.TaskAssignerInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DismissUser", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DismissUser indicates an expected call of DismissUser
func (mr *MockBoardClientMockRecorder) DismissUser(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissUser", reflect.TypeOf((*MockBoardClient)(nil).DismissUser), varargs...)
}

// GetBoard mocks base method
func (m *MockBoardClient) GetBoard(arg0 context.Context, arg1 *protoBoard.BoardInput, arg2 ...grpc.CallOption) (*protoBoard.BoardOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBoard", varargs...)
	ret0, _ := ret[0].(*protoBoard.BoardOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard
func (mr *MockBoardClientMockRecorder) GetBoard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockBoardClient)(nil).GetBoard), varargs...)
}

// GetBoardsList mocks base method
func (m *MockBoardClient) GetBoardsList(arg0 context.Context, arg1 *protoProfile.UserID, arg2 ...grpc.CallOption) (*protoProfile.BoardsOutsideShort, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBoardsList", varargs...)
	ret0, _ := ret[0].(*protoProfile.BoardsOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsList indicates an expected call of GetBoardsList
func (mr *MockBoardClientMockRecorder) GetBoardsList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsList", reflect.TypeOf((*MockBoardClient)(nil).GetBoardsList), varargs...)
}

// GetCard mocks base method
func (m *MockBoardClient) GetCard(arg0 context.Context, arg1 *protoBoard.CardInput, arg2 ...grpc.CallOption) (*protoBoard.CardOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCard", varargs...)
	ret0, _ := ret[0].(*protoBoard.CardOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard
func (mr *MockBoardClientMockRecorder) GetCard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockBoardClient)(nil).GetCard), varargs...)
}

// GetTask mocks base method
func (m *MockBoardClient) GetTask(arg0 context.Context, arg1 *protoBoard.TaskInput, arg2 ...grpc.CallOption) (*protoBoard.TaskOutside, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTask", varargs...)
	ret0, _ := ret[0].(*protoBoard.TaskOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockBoardClientMockRecorder) GetTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockBoardClient)(nil).GetTask), varargs...)
}

// RemoveAttachment mocks base method
func (m *MockBoardClient) RemoveAttachment(arg0 context.Context, arg1 *protoBoard.AttachmentInfo, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAttachment", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAttachment indicates an expected call of RemoveAttachment
func (mr *MockBoardClientMockRecorder) RemoveAttachment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAttachment", reflect.TypeOf((*MockBoardClient)(nil).RemoveAttachment), varargs...)
}

// RemoveTag mocks base method
func (m *MockBoardClient) RemoveTag(arg0 context.Context, arg1 *protoBoard.TaskTagInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveTag", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTag indicates an expected call of RemoveTag
func (mr *MockBoardClientMockRecorder) RemoveTag(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockBoardClient)(nil).RemoveTag), varargs...)
}

// RemoveUserToBoard mocks base method
func (m *MockBoardClient) RemoveUserToBoard(arg0 context.Context, arg1 *protoBoard.BoardMemberInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUserToBoard", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserToBoard indicates an expected call of RemoveUserToBoard
func (mr *MockBoardClientMockRecorder) RemoveUserToBoard(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserToBoard", reflect.TypeOf((*MockBoardClient)(nil).RemoveUserToBoard), varargs...)
}

// TasksOrderChange mocks base method
func (m *MockBoardClient) TasksOrderChange(arg0 context.Context, arg1 *protoBoard.TasksOrderInput, arg2 ...grpc.CallOption) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TasksOrderChange", varargs...)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TasksOrderChange indicates an expected call of TasksOrderChange
func (mr *MockBoardClientMockRecorder) TasksOrderChange(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksOrderChange", reflect.TypeOf((*MockBoardClient)(nil).TasksOrderChange), varargs...)
}
