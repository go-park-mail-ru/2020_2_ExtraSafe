// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/services/board_service/internal/service (interfaces: Service)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	protoBoard "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/board"
	protoProfile "github.com/go-park-mail-ru/2020_2_ExtraSafe/services/proto/profile"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddAttachment mocks base method
func (m *MockService) AddAttachment(arg0 context.Context, arg1 *protoBoard.AttachmentInput) (*protoBoard.AttachmentOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAttachment", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.AttachmentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAttachment indicates an expected call of AddAttachment
func (mr *MockServiceMockRecorder) AddAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAttachment", reflect.TypeOf((*MockService)(nil).AddAttachment), arg0, arg1)
}

// AddTag mocks base method
func (m *MockService) AddTag(arg0 context.Context, arg1 *protoBoard.TaskTagInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTag", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTag indicates an expected call of AddTag
func (mr *MockServiceMockRecorder) AddTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockService)(nil).AddTag), arg0, arg1)
}

// AddUserToBoard mocks base method
func (m *MockService) AddUserToBoard(arg0 context.Context, arg1 *protoBoard.BoardMemberInput) (*protoProfile.UserOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToBoard", arg0, arg1)
	ret0, _ := ret[0].(*protoProfile.UserOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToBoard indicates an expected call of AddUserToBoard
func (mr *MockServiceMockRecorder) AddUserToBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBoard", reflect.TypeOf((*MockService)(nil).AddUserToBoard), arg0, arg1)
}

// AssignUser mocks base method
func (m *MockService) AssignUser(arg0 context.Context, arg1 *protoBoard.TaskAssignerInput) (*protoProfile.UserOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignUser", arg0, arg1)
	ret0, _ := ret[0].(*protoProfile.UserOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignUser indicates an expected call of AssignUser
func (mr *MockServiceMockRecorder) AssignUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUser", reflect.TypeOf((*MockService)(nil).AssignUser), arg0, arg1)
}

// CardOrderChange mocks base method
func (m *MockService) CardOrderChange(arg0 context.Context, arg1 *protoBoard.CardsOrderInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CardOrderChange", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CardOrderChange indicates an expected call of CardOrderChange
func (mr *MockServiceMockRecorder) CardOrderChange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CardOrderChange", reflect.TypeOf((*MockService)(nil).CardOrderChange), arg0, arg1)
}

// ChangeBoard mocks base method
func (m *MockService) ChangeBoard(arg0 context.Context, arg1 *protoBoard.BoardChangeInput) (*protoProfile.BoardOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBoard", arg0, arg1)
	ret0, _ := ret[0].(*protoProfile.BoardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBoard indicates an expected call of ChangeBoard
func (mr *MockServiceMockRecorder) ChangeBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBoard", reflect.TypeOf((*MockService)(nil).ChangeBoard), arg0, arg1)
}

// ChangeCard mocks base method
func (m *MockService) ChangeCard(arg0 context.Context, arg1 *protoBoard.CardInput) (*protoBoard.CardOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.CardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeCard indicates an expected call of ChangeCard
func (mr *MockServiceMockRecorder) ChangeCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCard", reflect.TypeOf((*MockService)(nil).ChangeCard), arg0, arg1)
}

// ChangeChecklist mocks base method
func (m *MockService) ChangeChecklist(arg0 context.Context, arg1 *protoBoard.ChecklistInput) (*protoBoard.ChecklistOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeChecklist", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.ChecklistOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeChecklist indicates an expected call of ChangeChecklist
func (mr *MockServiceMockRecorder) ChangeChecklist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeChecklist", reflect.TypeOf((*MockService)(nil).ChangeChecklist), arg0, arg1)
}

// ChangeComment mocks base method
func (m *MockService) ChangeComment(arg0 context.Context, arg1 *protoBoard.CommentInput) (*protoBoard.CommentOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeComment", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.CommentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeComment indicates an expected call of ChangeComment
func (mr *MockServiceMockRecorder) ChangeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeComment", reflect.TypeOf((*MockService)(nil).ChangeComment), arg0, arg1)
}

// ChangeTag mocks base method
func (m *MockService) ChangeTag(arg0 context.Context, arg1 *protoBoard.TagInput) (*protoBoard.TagOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTag", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.TagOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTag indicates an expected call of ChangeTag
func (mr *MockServiceMockRecorder) ChangeTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTag", reflect.TypeOf((*MockService)(nil).ChangeTag), arg0, arg1)
}

// ChangeTask mocks base method
func (m *MockService) ChangeTask(arg0 context.Context, arg1 *protoBoard.TaskInput) (*protoBoard.TaskOutsideSuperShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTask", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.TaskOutsideSuperShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTask indicates an expected call of ChangeTask
func (mr *MockServiceMockRecorder) ChangeTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTask", reflect.TypeOf((*MockService)(nil).ChangeTask), arg0, arg1)
}

// CheckBoardPermission mocks base method
func (m *MockService) CheckBoardPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBoardPermission", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBoardPermission indicates an expected call of CheckBoardPermission
func (mr *MockServiceMockRecorder) CheckBoardPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBoardPermission", reflect.TypeOf((*MockService)(nil).CheckBoardPermission), arg0, arg1)
}

// CheckCardPermission mocks base method
func (m *MockService) CheckCardPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCardPermission", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCardPermission indicates an expected call of CheckCardPermission
func (mr *MockServiceMockRecorder) CheckCardPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCardPermission", reflect.TypeOf((*MockService)(nil).CheckCardPermission), arg0, arg1)
}

// CheckCommentPermission mocks base method
func (m *MockService) CheckCommentPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCommentPermission", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCommentPermission indicates an expected call of CheckCommentPermission
func (mr *MockServiceMockRecorder) CheckCommentPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCommentPermission", reflect.TypeOf((*MockService)(nil).CheckCommentPermission), arg0, arg1)
}

// CheckTaskPermission mocks base method
func (m *MockService) CheckTaskPermission(arg0 context.Context, arg1 *protoBoard.CheckPermissions) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskPermission", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskPermission indicates an expected call of CheckTaskPermission
func (mr *MockServiceMockRecorder) CheckTaskPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskPermission", reflect.TypeOf((*MockService)(nil).CheckTaskPermission), arg0, arg1)
}

// CreateBoard mocks base method
func (m *MockService) CreateBoard(arg0 context.Context, arg1 *protoBoard.BoardChangeInput) (*protoProfile.BoardOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBoard", arg0, arg1)
	ret0, _ := ret[0].(*protoProfile.BoardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBoard indicates an expected call of CreateBoard
func (mr *MockServiceMockRecorder) CreateBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBoard", reflect.TypeOf((*MockService)(nil).CreateBoard), arg0, arg1)
}

// CreateCard mocks base method
func (m *MockService) CreateCard(arg0 context.Context, arg1 *protoBoard.CardInput) (*protoBoard.CardOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.CardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockServiceMockRecorder) CreateCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockService)(nil).CreateCard), arg0, arg1)
}

// CreateChecklist mocks base method
func (m *MockService) CreateChecklist(arg0 context.Context, arg1 *protoBoard.ChecklistInput) (*protoBoard.ChecklistOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChecklist", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.ChecklistOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChecklist indicates an expected call of CreateChecklist
func (mr *MockServiceMockRecorder) CreateChecklist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChecklist", reflect.TypeOf((*MockService)(nil).CreateChecklist), arg0, arg1)
}

// CreateComment mocks base method
func (m *MockService) CreateComment(arg0 context.Context, arg1 *protoBoard.CommentInput) (*protoBoard.CommentOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.CommentOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockServiceMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockService)(nil).CreateComment), arg0, arg1)
}

// CreateTag mocks base method
func (m *MockService) CreateTag(arg0 context.Context, arg1 *protoBoard.TagInput) (*protoBoard.TagOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.TagOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag
func (mr *MockServiceMockRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockService)(nil).CreateTag), arg0, arg1)
}

// CreateTask mocks base method
func (m *MockService) CreateTask(arg0 context.Context, arg1 *protoBoard.TaskInput) (*protoBoard.TaskOutsideSuperShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.TaskOutsideSuperShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockServiceMockRecorder) CreateTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockService)(nil).CreateTask), arg0, arg1)
}

// DeleteBoard mocks base method
func (m *MockService) DeleteBoard(arg0 context.Context, arg1 *protoBoard.BoardInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBoard indicates an expected call of DeleteBoard
func (mr *MockServiceMockRecorder) DeleteBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoard", reflect.TypeOf((*MockService)(nil).DeleteBoard), arg0, arg1)
}

// DeleteCard mocks base method
func (m *MockService) DeleteCard(arg0 context.Context, arg1 *protoBoard.CardInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCard indicates an expected call of DeleteCard
func (mr *MockServiceMockRecorder) DeleteCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockService)(nil).DeleteCard), arg0, arg1)
}

// DeleteChecklist mocks base method
func (m *MockService) DeleteChecklist(arg0 context.Context, arg1 *protoBoard.ChecklistInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChecklist", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChecklist indicates an expected call of DeleteChecklist
func (mr *MockServiceMockRecorder) DeleteChecklist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChecklist", reflect.TypeOf((*MockService)(nil).DeleteChecklist), arg0, arg1)
}

// DeleteComment mocks base method
func (m *MockService) DeleteComment(arg0 context.Context, arg1 *protoBoard.CommentInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockServiceMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockService)(nil).DeleteComment), arg0, arg1)
}

// DeleteTag mocks base method
func (m *MockService) DeleteTag(arg0 context.Context, arg1 *protoBoard.TagInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag
func (mr *MockServiceMockRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockService)(nil).DeleteTag), arg0, arg1)
}

// DeleteTask mocks base method
func (m *MockService) DeleteTask(arg0 context.Context, arg1 *protoBoard.TaskInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *MockServiceMockRecorder) DeleteTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockService)(nil).DeleteTask), arg0, arg1)
}

// DismissUser mocks base method
func (m *MockService) DismissUser(arg0 context.Context, arg1 *protoBoard.TaskAssignerInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DismissUser", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DismissUser indicates an expected call of DismissUser
func (mr *MockServiceMockRecorder) DismissUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DismissUser", reflect.TypeOf((*MockService)(nil).DismissUser), arg0, arg1)
}

// GetBoard mocks base method
func (m *MockService) GetBoard(arg0 context.Context, arg1 *protoBoard.BoardInput) (*protoBoard.BoardOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.BoardOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoard indicates an expected call of GetBoard
func (mr *MockServiceMockRecorder) GetBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoard", reflect.TypeOf((*MockService)(nil).GetBoard), arg0, arg1)
}

// GetBoardsList mocks base method
func (m *MockService) GetBoardsList(arg0 context.Context, arg1 *protoProfile.UserID) (*protoProfile.BoardsOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsList", arg0, arg1)
	ret0, _ := ret[0].(*protoProfile.BoardsOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardsList indicates an expected call of GetBoardsList
func (mr *MockServiceMockRecorder) GetBoardsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsList", reflect.TypeOf((*MockService)(nil).GetBoardsList), arg0, arg1)
}

// GetCard mocks base method
func (m *MockService) GetCard(arg0 context.Context, arg1 *protoBoard.CardInput) (*protoBoard.CardOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.CardOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard
func (mr *MockServiceMockRecorder) GetCard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockService)(nil).GetCard), arg0, arg1)
}

// GetTask mocks base method
func (m *MockService) GetTask(arg0 context.Context, arg1 *protoBoard.TaskInput) (*protoBoard.TaskOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.TaskOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockServiceMockRecorder) GetTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockService)(nil).GetTask), arg0, arg1)
}

// RemoveAttachment mocks base method
func (m *MockService) RemoveAttachment(arg0 context.Context, arg1 *protoBoard.AttachmentInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAttachment", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAttachment indicates an expected call of RemoveAttachment
func (mr *MockServiceMockRecorder) RemoveAttachment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAttachment", reflect.TypeOf((*MockService)(nil).RemoveAttachment), arg0, arg1)
}

// RemoveTag mocks base method
func (m *MockService) RemoveTag(arg0 context.Context, arg1 *protoBoard.TaskTagInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTag indicates an expected call of RemoveTag
func (mr *MockServiceMockRecorder) RemoveTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockService)(nil).RemoveTag), arg0, arg1)
}

// RemoveUserToBoard mocks base method
func (m *MockService) RemoveUserToBoard(arg0 context.Context, arg1 *protoBoard.BoardMemberInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserToBoard", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserToBoard indicates an expected call of RemoveUserToBoard
func (mr *MockServiceMockRecorder) RemoveUserToBoard(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserToBoard", reflect.TypeOf((*MockService)(nil).RemoveUserToBoard), arg0, arg1)
}

// TasksOrderChange mocks base method
func (m *MockService) TasksOrderChange(arg0 context.Context, arg1 *protoBoard.TasksOrderInput) (*protoBoard.Nothing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TasksOrderChange", arg0, arg1)
	ret0, _ := ret[0].(*protoBoard.Nothing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TasksOrderChange indicates an expected call of TasksOrderChange
func (mr *MockServiceMockRecorder) TasksOrderChange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TasksOrderChange", reflect.TypeOf((*MockService)(nil).TasksOrderChange), arg0, arg1)
}
