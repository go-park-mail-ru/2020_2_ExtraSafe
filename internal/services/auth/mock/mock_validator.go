// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/internal/services/auth (interfaces: Validator)

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_ExtraSafe/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// ValidateLogin mocks base method
func (m *MockValidator) ValidateLogin(arg0 models.UserInputLogin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLogin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLogin indicates an expected call of ValidateLogin
func (mr *MockValidatorMockRecorder) ValidateLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLogin", reflect.TypeOf((*MockValidator)(nil).ValidateLogin), arg0)
}

// ValidateRegistration mocks base method
func (m *MockValidator) ValidateRegistration(arg0 models.UserInputReg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRegistration", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRegistration indicates an expected call of ValidateRegistration
func (mr *MockValidatorMockRecorder) ValidateRegistration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRegistration", reflect.TypeOf((*MockValidator)(nil).ValidateRegistration), arg0)
}
