// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(in *jlexer.Lexer, out *ChecklistOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checklistID":
			out.ChecklistID = int64(in.Int64())
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "cardID":
			out.CardID = int64(in.Int64())
		case "checklistName":
			out.Name = string(in.String())
		case "checklistItems":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Items).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(out *jwriter.Writer, in ChecklistOutside) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChecklistID != 0 {
		const prefix string = ",\"checklistID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChecklistID))
	}
	if in.TaskID != 0 {
		const prefix string = ",\"taskID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TaskID))
	}
	if in.CardID != 0 {
		const prefix string = ",\"cardID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CardID))
	}
	if in.Name != "" {
		const prefix string = ",\"checklistName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"checklistItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Items).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistOutside) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistOutside) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistOutside) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistOutside) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(l, v)
}
func easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(in *jlexer.Lexer, out *ChecklistInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checklistID":
			out.ChecklistID = int64(in.Int64())
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "checklistName":
			out.Name = string(in.String())
		case "checklistItems":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Items).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(out *jwriter.Writer, in ChecklistInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checklistID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ChecklistID))
	}
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"checklistName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"checklistItems\":"
		out.RawString(prefix)
		out.Raw((in.Items).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChecklistInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChecklistInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChecklistInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChecklistInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(l, v)
}
func easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(in *jlexer.Lexer, out *Checklist) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChecklistID":
			out.ChecklistID = int64(in.Int64())
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		case "Items":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Items).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(out *jwriter.Writer, in Checklist) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChecklistID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChecklistID))
	}
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Items\":"
		out.RawString(prefix)
		out.Raw((in.Items).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Checklist) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Checklist) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonAa748b4bEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Checklist) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Checklist) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonAa748b4bDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(l, v)
}
