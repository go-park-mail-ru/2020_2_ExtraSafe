// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD31a5a85DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(in *jlexer.Lexer, out *ServeError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "codes":
			if in.IsNull() {
				in.Skip()
				out.Codes = nil
			} else {
				in.Delim('[')
				if out.Codes == nil {
					if !in.IsDelim(']') {
						out.Codes = make([]string, 0, 4)
					} else {
						out.Codes = []string{}
					}
				} else {
					out.Codes = (out.Codes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Codes = append(out.Codes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "descriptions":
			if in.IsNull() {
				in.Skip()
				out.Descriptions = nil
			} else {
				in.Delim('[')
				if out.Descriptions == nil {
					if !in.IsDelim(']') {
						out.Descriptions = make([]string, 0, 4)
					} else {
						out.Descriptions = []string{}
					}
				} else {
					out.Descriptions = (out.Descriptions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Descriptions = append(out.Descriptions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "method_name":
			out.MethodName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(out *jwriter.Writer, in ServeError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"codes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Codes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Codes {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"descriptions\":"
		out.RawString(prefix)
		if in.Descriptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Descriptions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"method_name\":"
		out.RawString(prefix)
		out.String(string(in.MethodName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServeError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServeError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServeError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServeError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(l, v)
}
func easyjsonD31a5a85DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(in *jlexer.Lexer, out *MultiErrors) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "codes":
			if in.IsNull() {
				in.Skip()
				out.Codes = nil
			} else {
				in.Delim('[')
				if out.Codes == nil {
					if !in.IsDelim(']') {
						out.Codes = make([]string, 0, 4)
					} else {
						out.Codes = []string{}
					}
				} else {
					out.Codes = (out.Codes)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Codes = append(out.Codes, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "descriptions":
			if in.IsNull() {
				in.Skip()
				out.Descriptions = nil
			} else {
				in.Delim('[')
				if out.Descriptions == nil {
					if !in.IsDelim(']') {
						out.Descriptions = make([]string, 0, 4)
					} else {
						out.Descriptions = []string{}
					}
				} else {
					out.Descriptions = (out.Descriptions)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.Descriptions = append(out.Descriptions, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(out *jwriter.Writer, in MultiErrors) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"codes\":"
		out.RawString(prefix[1:])
		if in.Codes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Codes {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"descriptions\":"
		out.RawString(prefix)
		if in.Descriptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Descriptions {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MultiErrors) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MultiErrors) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MultiErrors) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MultiErrors) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(l, v)
}
