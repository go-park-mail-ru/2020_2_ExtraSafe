// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(in *jlexer.Lexer, out *TasksOrderInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cards":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]TasksOrder, 0, 2)
					} else {
						out.Tasks = []TasksOrder{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TasksOrder
					(v1).UnmarshalEasyJSON(in)
					out.Tasks = append(out.Tasks, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(out *jwriter.Writer, in TasksOrderInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Tasks {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TasksOrderInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TasksOrderInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TasksOrderInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TasksOrderInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(in *jlexer.Lexer, out *TasksOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cardID":
			out.CardID = int64(in.Int64())
		case "cardTasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]TaskOrder, 0, 4)
					} else {
						out.Tasks = []TaskOrder{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TaskOrder
					(v4).UnmarshalEasyJSON(in)
					out.Tasks = append(out.Tasks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(out *jwriter.Writer, in TasksOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cardID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"cardTasks\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tasks {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TasksOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TasksOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TasksOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TasksOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(in *jlexer.Lexer, out *TaskTagInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "tagID":
			out.TagID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(out *jwriter.Writer, in TaskTagInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"tagID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TagID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskTagInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskTagInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskTagInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskTagInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(in *jlexer.Lexer, out *TaskOutsideSuperShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "taskName":
			out.Name = string(in.String())
		case "taskDescription":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(out *jwriter.Writer, in TaskOutsideSuperShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"taskName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"taskDescription\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskOutsideSuperShort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskOutsideSuperShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskOutsideSuperShort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskOutsideSuperShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(in *jlexer.Lexer, out *TaskOutsideShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "taskName":
			out.Name = string(in.String())
		case "taskDescription":
			out.Description = string(in.String())
		case "taskOrder":
			out.Order = int64(in.Int64())
		case "taskTags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagOutside, 0, 1)
					} else {
						out.Tags = []TagOutside{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TagOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in, &v7)
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskAssigners":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserOutsideShort, 0, 0)
					} else {
						out.Users = []UserOutsideShort{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v8 UserOutsideShort
					(v8).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskChecklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistOutside, 0, 1)
					} else {
						out.Checklists = []ChecklistOutside{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v9 ChecklistOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(in, &v9)
					out.Checklists = append(out.Checklists, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(out *jwriter.Writer, in TaskOutsideShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"taskName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"taskDescription\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"taskOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"taskTags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Tags {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out, v11)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskAssigners\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Users {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskChecklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Checklists {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskOutsideShort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskOutsideShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskOutsideShort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskOutsideShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(in *jlexer.Lexer, out *ChecklistOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checklistID":
			out.ChecklistID = int64(in.Int64())
		case "checklistName":
			out.Name = string(in.String())
		case "checklistItems":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Items).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(out *jwriter.Writer, in ChecklistOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checklistID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChecklistID))
	}
	{
		const prefix string = ",\"checklistName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"checklistItems\":"
		out.RawString(prefix)
		out.Raw((in.Items).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in *jlexer.Lexer, out *TagOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tagID":
			out.TagID = int64(in.Int64())
		case "tagColor":
			out.Color = string(in.String())
		case "tagName":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out *jwriter.Writer, in TagOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tagID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TagID))
	}
	{
		const prefix string = ",\"tagColor\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"tagName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(in *jlexer.Lexer, out *TaskOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "taskName":
			out.Name = string(in.String())
		case "taskDescription":
			out.Description = string(in.String())
		case "taskOrder":
			out.Order = int64(in.Int64())
		case "taskTags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagOutside, 0, 1)
					} else {
						out.Tags = []TagOutside{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TagOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in, &v16)
					out.Tags = append(out.Tags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskAssigners":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserOutsideShort, 0, 0)
					} else {
						out.Users = []UserOutsideShort{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v17 UserOutsideShort
					(v17).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskChecklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistOutside, 0, 1)
					} else {
						out.Checklists = []ChecklistOutside{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v18 ChecklistOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(in, &v18)
					out.Checklists = append(out.Checklists, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskComments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]CommentOutside, 0, 0)
					} else {
						out.Comments = []CommentOutside{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v19 CommentOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(in, &v19)
					out.Comments = append(out.Comments, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskAttachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]AttachmentOutside, 0, 1)
					} else {
						out.Attachments = []AttachmentOutside{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v20 AttachmentOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(in, &v20)
					out.Attachments = append(out.Attachments, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(out *jwriter.Writer, in TaskOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"taskName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"taskDescription\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"taskOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"taskTags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Tags {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskAssigners\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Users {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskChecklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Checklists {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(out, v26)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskComments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Comments {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(out, v28)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskAttachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Attachments {
				if v29 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(out, v30)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskOutside) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskOutside) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskOutside) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskOutside) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(in *jlexer.Lexer, out *AttachmentOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "attachmentID":
			out.AttachmentID = int64(in.Int64())
		case "attachmentFileName":
			out.Filename = string(in.String())
		case "attachmentFilePath":
			out.Filepath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(out *jwriter.Writer, in AttachmentOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"attachmentID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AttachmentID))
	}
	{
		const prefix string = ",\"attachmentFileName\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"attachmentFilePath\":"
		out.RawString(prefix)
		out.String(string(in.Filepath))
	}
	out.RawByte('}')
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(in *jlexer.Lexer, out *CommentOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentID":
			out.CommentID = int64(in.Int64())
		case "commentMessage":
			out.Message = string(in.String())
		case "commentOrder":
			out.Order = int64(in.Int64())
		case "commentAuthor":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(out *jwriter.Writer, in CommentOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commentID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CommentID))
	}
	{
		const prefix string = ",\"commentMessage\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"commentOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"commentAuthor\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(in *jlexer.Lexer, out *TaskOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "taskOrder":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(out *jwriter.Writer, in TaskOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"taskOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels11(in *jlexer.Lexer, out *TaskInternalShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Order":
			out.Order = int64(in.Int64())
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagOutside, 0, 1)
					} else {
						out.Tags = []TagOutside{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v31 TagOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in, &v31)
					out.Tags = append(out.Tags, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]int64, 0, 8)
					} else {
						out.Users = []int64{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v32 int64
					v32 = int64(in.Int64())
					out.Users = append(out.Users, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Checklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistOutside, 0, 1)
					} else {
						out.Checklists = []ChecklistOutside{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v33 ChecklistOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(in, &v33)
					out.Checklists = append(out.Checklists, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels11(out *jwriter.Writer, in TaskInternalShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.Tags {
				if v34 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out, v35)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Users {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Checklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Checklists {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(out, v39)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskInternalShort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskInternalShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskInternalShort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskInternalShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels11(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels12(in *jlexer.Lexer, out *TaskInternal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Order":
			out.Order = int64(in.Int64())
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagOutside, 0, 1)
					} else {
						out.Tags = []TagOutside{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v40 TagOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in, &v40)
					out.Tags = append(out.Tags, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]int64, 0, 8)
					} else {
						out.Users = []int64{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v41 int64
					v41 = int64(in.Int64())
					out.Users = append(out.Users, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Checklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistOutside, 0, 1)
					} else {
						out.Checklists = []ChecklistOutside{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v42 ChecklistOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(in, &v42)
					out.Checklists = append(out.Checklists, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]CommentOutside, 0, 0)
					} else {
						out.Comments = []CommentOutside{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v43 CommentOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(in, &v43)
					out.Comments = append(out.Comments, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]AttachmentOutside, 0, 1)
					} else {
						out.Attachments = []AttachmentOutside{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v44 AttachmentOutside
					easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(in, &v44)
					out.Attachments = append(out.Attachments, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels12(out *jwriter.Writer, in TaskInternal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Tags {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out, v46)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Users {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v48))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Checklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v49, v50 := range in.Checklists {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(out, v50)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Comments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Comments {
				if v51 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(out, v52)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Attachments {
				if v53 > 0 {
					out.RawByte(',')
				}
				easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(out, v54)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskInternal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskInternal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskInternal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskInternal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels12(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels13(in *jlexer.Lexer, out *TaskInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "cardID":
			out.CardID = int64(in.Int64())
		case "taskName":
			out.Name = string(in.String())
		case "taskDescription":
			out.Description = string(in.String())
		case "taskOrder":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels13(out *jwriter.Writer, in TaskInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"cardID\":"
		out.RawString(prefix)
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"taskName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"taskDescription\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"taskOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels13(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels14(in *jlexer.Lexer, out *TaskAssignerInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "assignerUsername":
			out.AssignerName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels14(out *jwriter.Writer, in TaskAssignerInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"assignerUsername\":"
		out.RawString(prefix)
		out.String(string(in.AssignerName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskAssignerInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskAssignerInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskAssignerInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskAssignerInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels14(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels15(in *jlexer.Lexer, out *TaskAssigner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "UserID":
			out.UserID = int64(in.Int64())
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "AssignerID":
			out.AssignerID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels15(out *jwriter.Writer, in TaskAssigner) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"AssignerID\":"
		out.RawString(prefix)
		out.Int64(int64(in.AssignerID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskAssigner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskAssigner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskAssigner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskAssigner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels15(l, v)
}
func easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels16(in *jlexer.Lexer, out *Task) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "cardID":
			out.CardID = int64(in.Int64())
		case "taskName":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "order":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels16(out *jwriter.Writer, in Task) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"cardID\":"
		out.RawString(prefix)
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"taskName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Task) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Task) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE1b3f808EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Task) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Task) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE1b3f808DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels16(l, v)
}
