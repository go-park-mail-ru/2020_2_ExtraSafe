// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(in *jlexer.Lexer, out *CommentOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentID":
			out.CommentID = int64(in.Int64())
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "cardID":
			out.CardID = int64(in.Int64())
		case "commentMessage":
			out.Message = string(in.String())
		case "commentOrder":
			out.Order = int64(in.Int64())
		case "commentAuthor":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(out *jwriter.Writer, in CommentOutside) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CommentID != 0 {
		const prefix string = ",\"commentID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.CommentID))
	}
	if in.TaskID != 0 {
		const prefix string = ",\"taskID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TaskID))
	}
	if in.CardID != 0 {
		const prefix string = ",\"cardID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CardID))
	}
	if in.Message != "" {
		const prefix string = ",\"commentMessage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Order != 0 {
		const prefix string = ",\"commentOrder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Order))
	}
	if true {
		const prefix string = ",\"commentAuthor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentOutside) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentOutside) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentOutside) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentOutside) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(l, v)
}
func easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(in *jlexer.Lexer, out *CommentInternal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CommentID":
			out.CommentID = int64(in.Int64())
		case "CardID":
			out.CardID = int64(in.Int64())
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "Message":
			out.Message = string(in.String())
		case "Order":
			out.Order = int64(in.Int64())
		case "UserID":
			out.UserID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(out *jwriter.Writer, in CommentInternal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CommentID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CommentID))
	}
	{
		const prefix string = ",\"CardID\":"
		out.RawString(prefix)
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentInternal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentInternal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentInternal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentInternal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(l, v)
}
func easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(in *jlexer.Lexer, out *CommentInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "commentID":
			out.CommentID = int64(in.Int64())
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "commentMessage":
			out.Message = string(in.String())
		case "commentOrder":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(out *jwriter.Writer, in CommentInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"commentID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CommentID))
	}
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"commentMessage\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"commentOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(l, v)
}
func easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CommentID":
			out.CommentID = int64(in.Int64())
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "Message":
			out.Message = string(in.String())
		case "Order":
			out.Order = int64(in.Int64())
		case "UserID":
			out.UserID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CommentID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CommentID))
	}
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix)
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.Int64(int64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD09abad2EncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD09abad2DecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(l, v)
}
