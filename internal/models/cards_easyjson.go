// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(in *jlexer.Lexer, out *CardsOrderInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cards":
			if in.IsNull() {
				in.Skip()
				out.Cards = nil
			} else {
				in.Delim('[')
				if out.Cards == nil {
					if !in.IsDelim(']') {
						out.Cards = make([]CardOrder, 0, 4)
					} else {
						out.Cards = []CardOrder{}
					}
				} else {
					out.Cards = (out.Cards)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CardOrder
					(v1).UnmarshalEasyJSON(in)
					out.Cards = append(out.Cards, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(out *jwriter.Writer, in CardsOrderInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Cards == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Cards {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardsOrderInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardsOrderInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardsOrderInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardsOrderInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels(l, v)
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(in *jlexer.Lexer, out *CardOutsideShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cardID":
			out.CardID = int64(in.Int64())
		case "cardName":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(out *jwriter.Writer, in CardOutsideShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cardID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"cardName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardOutsideShort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardOutsideShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardOutsideShort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardOutsideShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels1(l, v)
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(in *jlexer.Lexer, out *CardOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cardID":
			out.CardID = int64(in.Int64())
		case "cardName":
			out.Name = string(in.String())
		case "cardOrder":
			out.Order = int64(in.Int64())
		case "cardTasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]TaskOutsideShort, 0, 0)
					} else {
						out.Tasks = []TaskOutsideShort{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TaskOutsideShort
					easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(in, &v4)
					out.Tasks = append(out.Tasks, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(out *jwriter.Writer, in CardOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cardID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"cardName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"cardOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"cardTasks\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Tasks {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardOutside) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardOutside) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardOutside) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardOutside) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels2(l, v)
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(in *jlexer.Lexer, out *TaskOutsideShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "taskID":
			out.TaskID = int64(in.Int64())
		case "taskName":
			out.Name = string(in.String())
		case "taskDescription":
			out.Description = string(in.String())
		case "taskOrder":
			out.Order = int64(in.Int64())
		case "taskTags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagOutside, 0, 1)
					} else {
						out.Tags = []TagOutside{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 TagOutside
					easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(in, &v7)
					out.Tags = append(out.Tags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskAssigners":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]UserOutsideShort, 0, 0)
					} else {
						out.Users = []UserOutsideShort{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v8 UserOutsideShort
					(v8).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "taskChecklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistOutside, 0, 1)
					} else {
						out.Checklists = []ChecklistOutside{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v9 ChecklistOutside
					easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in, &v9)
					out.Checklists = append(out.Checklists, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels3(out *jwriter.Writer, in TaskOutsideShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"taskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"taskName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"taskDescription\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"taskOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"taskTags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Tags {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(out, v11)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskAssigners\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Users {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"taskChecklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Checklists {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in *jlexer.Lexer, out *ChecklistOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "checklistID":
			out.ChecklistID = int64(in.Int64())
		case "checklistName":
			out.Name = string(in.String())
		case "checklistItems":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Items).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out *jwriter.Writer, in ChecklistOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"checklistID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChecklistID))
	}
	{
		const prefix string = ",\"checklistName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"checklistItems\":"
		out.RawString(prefix)
		out.Raw((in.Items).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(in *jlexer.Lexer, out *TagOutside) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tagID":
			out.TagID = int64(in.Int64())
		case "tagColor":
			out.Color = string(in.String())
		case "tagName":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(out *jwriter.Writer, in TagOutside) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tagID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TagID))
	}
	{
		const prefix string = ",\"tagColor\":"
		out.RawString(prefix)
		out.String(string(in.Color))
	}
	{
		const prefix string = ",\"tagName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(in *jlexer.Lexer, out *CardOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cardID":
			out.CardID = int64(in.Int64())
		case "cardOrder":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(out *jwriter.Writer, in CardOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cardID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"cardOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels6(l, v)
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(in *jlexer.Lexer, out *CardInternal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "CardID":
			out.CardID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		case "Order":
			out.Order = int64(in.Int64())
		case "Tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]TaskInternalShort, 0, 0)
					} else {
						out.Tasks = []TaskInternalShort{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v16 TaskInternalShort
					easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(in, &v16)
					out.Tasks = append(out.Tasks, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(out *jwriter.Writer, in CardInternal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"CardID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"Tasks\":"
		out.RawString(prefix)
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Tasks {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardInternal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardInternal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardInternal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardInternal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels7(l, v)
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(in *jlexer.Lexer, out *TaskInternalShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TaskID":
			out.TaskID = int64(in.Int64())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Order":
			out.Order = int64(in.Int64())
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]TagOutside, 0, 1)
					} else {
						out.Tags = []TagOutside{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v19 TagOutside
					easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(in, &v19)
					out.Tags = append(out.Tags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]int64, 0, 8)
					} else {
						out.Users = []int64{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v20 int64
					v20 = int64(in.Int64())
					out.Users = append(out.Users, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Checklists":
			if in.IsNull() {
				in.Skip()
				out.Checklists = nil
			} else {
				in.Delim('[')
				if out.Checklists == nil {
					if !in.IsDelim(']') {
						out.Checklists = make([]ChecklistOutside, 0, 1)
					} else {
						out.Checklists = []ChecklistOutside{}
					}
				} else {
					out.Checklists = (out.Checklists)[:0]
				}
				for !in.IsDelim(']') {
					var v21 ChecklistOutside
					easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(in, &v21)
					out.Checklists = append(out.Checklists, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels8(out *jwriter.Writer, in TaskInternalShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TaskID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TaskID))
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"Order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Tags {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels4(out, v23)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Users {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Checklists\":"
		out.RawString(prefix)
		if in.Checklists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Checklists {
				if v26 > 0 {
					out.RawByte(',')
				}
				easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels5(out, v27)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(in *jlexer.Lexer, out *CardInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cardID":
			out.CardID = int64(in.Int64())
		case "boardID":
			out.BoardID = int64(in.Int64())
		case "cardName":
			out.Name = string(in.String())
		case "cardOrder":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(out *jwriter.Writer, in CardInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cardID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"boardID\":"
		out.RawString(prefix)
		out.Int64(int64(in.BoardID))
	}
	{
		const prefix string = ",\"cardName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"cardOrder\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CardInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CardInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CardInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CardInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels9(l, v)
}
func easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "columnID":
			out.CardID = int64(in.Int64())
		case "boardID":
			out.BoardID = int64(in.Int64())
		case "cardName":
			out.Name = string(in.String())
		case "order":
			out.Order = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"columnID\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.CardID))
	}
	{
		const prefix string = ",\"boardID\":"
		out.RawString(prefix)
		out.Int64(int64(in.BoardID))
	}
	{
		const prefix string = ",\"cardName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"order\":"
		out.RawString(prefix)
		out.Int64(int64(in.Order))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Card) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Card) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b92225fEncodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Card) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Card) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b92225fDecodeGithubComGoParkMailRu20202ExtraSafeInternalModels10(l, v)
}
