// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/internal/services/profile (interfaces: ServiceProfile)

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_ExtraSafe/internal/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServiceProfile is a mock of ServiceProfile interface
type MockServiceProfile struct {
	ctrl     *gomock.Controller
	recorder *MockServiceProfileMockRecorder
}

// MockServiceProfileMockRecorder is the mock recorder for MockServiceProfile
type MockServiceProfileMockRecorder struct {
	mock *MockServiceProfile
}

// NewMockServiceProfile creates a new mock instance
func NewMockServiceProfile(ctrl *gomock.Controller) *MockServiceProfile {
	mock := &MockServiceProfile{ctrl: ctrl}
	mock.recorder = &MockServiceProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceProfile) EXPECT() *MockServiceProfileMockRecorder {
	return m.recorder
}

// Boards mocks base method
func (m *MockServiceProfile) Boards(arg0 models.UserInput) ([]models.BoardOutsideShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Boards", arg0)
	ret0, _ := ret[0].([]models.BoardOutsideShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Boards indicates an expected call of Boards
func (mr *MockServiceProfileMockRecorder) Boards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boards", reflect.TypeOf((*MockServiceProfile)(nil).Boards), arg0)
}

// PasswordChange mocks base method
func (m *MockServiceProfile) PasswordChange(arg0 models.UserInputPassword) (models.UserOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordChange", arg0)
	ret0, _ := ret[0].(models.UserOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordChange indicates an expected call of PasswordChange
func (mr *MockServiceProfileMockRecorder) PasswordChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordChange", reflect.TypeOf((*MockServiceProfile)(nil).PasswordChange), arg0)
}

// Profile mocks base method
func (m *MockServiceProfile) Profile(arg0 models.UserInput) (models.UserOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Profile", arg0)
	ret0, _ := ret[0].(models.UserOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Profile indicates an expected call of Profile
func (mr *MockServiceProfileMockRecorder) Profile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Profile", reflect.TypeOf((*MockServiceProfile)(nil).Profile), arg0)
}

// ProfileChange mocks base method
func (m *MockServiceProfile) ProfileChange(arg0 models.UserInputProfile) (models.UserOutside, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProfileChange", arg0)
	ret0, _ := ret[0].(models.UserOutside)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProfileChange indicates an expected call of ProfileChange
func (mr *MockServiceProfileMockRecorder) ProfileChange(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProfileChange", reflect.TypeOf((*MockServiceProfile)(nil).ProfileChange), arg0)
}
