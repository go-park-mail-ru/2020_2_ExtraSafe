// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/cmd/handlers/auth (interfaces: AuthSessions)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	reflect "reflect"
)

// MockAuthSessions is a mock of AuthSessions interface
type MockAuthSessions struct {
	ctrl     *gomock.Controller
	recorder *MockAuthSessionsMockRecorder
}

// MockAuthSessionsMockRecorder is the mock recorder for MockAuthSessions
type MockAuthSessionsMockRecorder struct {
	mock *MockAuthSessions
}

// NewMockAuthSessions creates a new mock instance
func NewMockAuthSessions(ctrl *gomock.Controller) *MockAuthSessions {
	mock := &MockAuthSessions{ctrl: ctrl}
	mock.recorder = &MockAuthSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthSessions) EXPECT() *MockAuthSessionsMockRecorder {
	return m.recorder
}

// CheckCookie mocks base method
func (m *MockAuthSessions) CheckCookie(arg0 echo.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCookie", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCookie indicates an expected call of CheckCookie
func (mr *MockAuthSessionsMockRecorder) CheckCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCookie", reflect.TypeOf((*MockAuthSessions)(nil).CheckCookie), arg0)
}

// DeleteCookie mocks base method
func (m *MockAuthSessions) DeleteCookie(arg0 echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCookie", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCookie indicates an expected call of DeleteCookie
func (mr *MockAuthSessionsMockRecorder) DeleteCookie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCookie", reflect.TypeOf((*MockAuthSessions)(nil).DeleteCookie), arg0)
}

// SetCookie mocks base method
func (m *MockAuthSessions) SetCookie(arg0 echo.Context, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCookie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCookie indicates an expected call of SetCookie
func (mr *MockAuthSessionsMockRecorder) SetCookie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookie", reflect.TypeOf((*MockAuthSessions)(nil).SetCookie), arg0, arg1)
}
