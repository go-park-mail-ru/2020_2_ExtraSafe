// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2020_2_ExtraSafe/cmd/handlers/auth (interfaces: AuthTransport)

// Package mock is a generated GoMock package.
package mock

import (
	models "github.com/go-park-mail-ru/2020_2_ExtraSafe/internal/models"
	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	reflect "reflect"
)

// MockAuthTransport is a mock of AuthTransport interface
type MockAuthTransport struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTransportMockRecorder
}

// MockAuthTransportMockRecorder is the mock recorder for MockAuthTransport
type MockAuthTransportMockRecorder struct {
	mock *MockAuthTransport
}

// NewMockAuthTransport creates a new mock instance
func NewMockAuthTransport(ctrl *gomock.Controller) *MockAuthTransport {
	mock := &MockAuthTransport{ctrl: ctrl}
	mock.recorder = &MockAuthTransportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthTransport) EXPECT() *MockAuthTransportMockRecorder {
	return m.recorder
}

// AuthRead mocks base method
func (m *MockAuthTransport) AuthRead(arg0 echo.Context) (models.UserInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthRead", arg0)
	ret0, _ := ret[0].(models.UserInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthRead indicates an expected call of AuthRead
func (mr *MockAuthTransportMockRecorder) AuthRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthRead", reflect.TypeOf((*MockAuthTransport)(nil).AuthRead), arg0)
}

// AuthWrite mocks base method
func (m *MockAuthTransport) AuthWrite(arg0 models.UserBoardsOutside, arg1 string) (models.ResponseUserAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthWrite", arg0, arg1)
	ret0, _ := ret[0].(models.ResponseUserAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthWrite indicates an expected call of AuthWrite
func (mr *MockAuthTransportMockRecorder) AuthWrite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthWrite", reflect.TypeOf((*MockAuthTransport)(nil).AuthWrite), arg0, arg1)
}

// LoginRead mocks base method
func (m *MockAuthTransport) LoginRead(arg0 echo.Context) (models.UserInputLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginRead", arg0)
	ret0, _ := ret[0].(models.UserInputLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginRead indicates an expected call of LoginRead
func (mr *MockAuthTransportMockRecorder) LoginRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginRead", reflect.TypeOf((*MockAuthTransport)(nil).LoginRead), arg0)
}

// LoginWrite mocks base method
func (m *MockAuthTransport) LoginWrite(arg0 string) (models.ResponseToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWrite", arg0)
	ret0, _ := ret[0].(models.ResponseToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWrite indicates an expected call of LoginWrite
func (mr *MockAuthTransportMockRecorder) LoginWrite(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWrite", reflect.TypeOf((*MockAuthTransport)(nil).LoginWrite), arg0)
}

// RegRead mocks base method
func (m *MockAuthTransport) RegRead(arg0 echo.Context) (models.UserInputReg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegRead", arg0)
	ret0, _ := ret[0].(models.UserInputReg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegRead indicates an expected call of RegRead
func (mr *MockAuthTransportMockRecorder) RegRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegRead", reflect.TypeOf((*MockAuthTransport)(nil).RegRead), arg0)
}

// RegWrite mocks base method
func (m *MockAuthTransport) RegWrite() (models.ResponseStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegWrite")
	ret0, _ := ret[0].(models.ResponseStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegWrite indicates an expected call of RegWrite
func (mr *MockAuthTransportMockRecorder) RegWrite() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegWrite", reflect.TypeOf((*MockAuthTransport)(nil).RegWrite))
}
